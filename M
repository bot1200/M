repeat task.wait() until game.Players.LocalPlayer.Character; local StarterGui = game:GetService("StarterGui"); local function Notify(Title, Message, Time) StarterGui:SetCore("SendNotification", {Title = Title, Text = Message, Duration = Time or 5}) end; if _G.capy then return Notify("Already Loaded", "Rejoin to continue.") else _G.capy = true end
getgenv().Players, getgenv().Workspace, getgenv().ReplicatedStorage, getgenv().RunService, getgenv().Lighting, getgenv().UIS, getgenv().ScriptContext, getgenv().Camera, getgenv().player, getgenv().Mouse, getgenv().Terrain, getgenv().VirtualUser, getgenv().LocalPlayer, getgenv().PlayerScripts, getgenv().RawMetatable, getgenv().OldNameCall, getgenv().UserInputService = game:GetService("Players"), game:GetService("Workspace"), game:GetService("ReplicatedStorage"), game:GetService("RunService"), game:GetService("Lighting"), game:GetService("UserInputService"), game:GetService("ScriptContext"), game:GetService("Workspace").CurrentCamera, game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer:GetMouse(), game:GetService("Workspace").Terrain, game:GetService("VirtualUser"), game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer:FindFirstChildOfClass("PlayerScripts"), getrawmetatable(game), getrawmetatable(game).__namecall, game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local CoreGui = game:GetService("CoreGui")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bot1200/Li/refs/heads/main/Li", true))()

local allowedUserIds = {2784663867, 87654321}

local ui = Library:CreateUI("Murder Mystery 2 / 130", "By CapybaraScript")

getgenv().tab11 = ui:AddTab(false, "INFO")
getgenv().tab1 = ui:AddTab(false, "Combat")
getgenv().tab2 = ui:AddTab(false, "Hitbox expander")
getgenv().tab10 = ui:AddTab(false, "Optimization")
getgenv().tab3 = ui:AddTab(false, "Visual")
getgenv().tab13 = ui:AddTab(false, "Trolls Tab")
getgenv().tab12 = ui:AddTab(true, "PREMIUM")
getgenv().tab4 = ui:AddTab(false, "Teleport")
getgenv().tab5 = ui:AddTab(false, "Auto Farm")
getgenv().tab6 = ui:AddTab(false, "Local Player")
getgenv().tab7 = ui:AddTab(false, "Emote")
getgenv().tab8 = ui:AddTab(false, "ActMgr")

getgenv().configFileName = "configmm2.txt"

getgenv().saveConfig = function(stateTable)
    writefile(getgenv().configFileName, game.HttpService:JSONEncode(stateTable))
end

getgenv().loadConfig = function()
    if isfile(getgenv().configFileName) then
        local success, data = pcall(function()
            return game.HttpService:JSONDecode(readfile(getgenv().configFileName))
        end)
        
        if success and type(data) == "table" then
            return data
        end
    end
    return {}
end

getgenv().savedConfig = getgenv().loadConfig()

local StarterGui = game:GetService("StarterGui")

StarterGui:SetCore("SendNotification", {
    Title = "CapybaraScript",
    Text = "saved configuration load",
    Icon = "rbxassetid://123456789",
    Duration = 3
})

setfpscap(1000)
print("Fps unblock")

getgenv().blockPosition = Vector3.new(-74, 6, 693)
getgenv().blockSize = Vector3.new(100, 2, 100)

if not workspace:FindFirstChild("WideBlock") then
    local wideBlock = Instance.new("Part")
    wideBlock.Name = "WideBlock"
    wideBlock.Size = blockSize
    wideBlock.Position = blockPosition
    wideBlock.Anchored = true
    wideBlock.CanCollide = true
    wideBlock.Transparency = 0.5
    wideBlock.Parent = workspace
end

local executor = "Unknown Executor"
if syn then
    executor = "Synapse X"
elseif KRNL_LOADED then
    executor = "KRNL"
elseif fluxus then
    executor = "Fluxus"
elseif evon then
    executor = "Evon"
elseif Arceus then
    executor = "Arceus X"
elseif wave then
    executor = "Wave"
elseif codex then
    executor = "Codex"
elseif vega_x then
    executor = "Vega X"
elseif delta then
    executor = "Delta"
elseif solara then
    executor = "Solara"
elseif cryptic then
    executor = "Cryptic"
elseif trigon then
    executor = "Trigon"
elseif MantiPWF then
    executor = "MantiPWF"
else
    if identifyexecutor then
        executor = identifyexecutor()
    elseif getexecutorname then
        executor = getexecutorname()
    end
end

Library.addLabel(tab11, "Executor: " .. executor)

getgenv().player = game:GetService("Players").LocalPlayer
getgenv().stats = game:GetService("Stats")
getgenv().runService = game:GetService("RunService")
getgenv().humanoidRootPart = getgenv().player.Character and getgenv().player.Character:FindFirstChild("HumanoidRootPart")

getgenv().playerNameLabel = Library.addLabel(tab11, "Player Name: Calculating...")
getgenv().displayNameLabel = Library.addLabel(tab11, "Display Name: Calculating...")
getgenv().fpsLabel = Library.addLabel(tab11, "FPS: Calculating...")
getgenv().pingLabel = Library.addLabel(tab11, "Ping: Calculating...")
getgenv().localTimeLabel = Library.addLabel(tab11, "Local Time: Calculating...")
getgenv().serverTimeLabel = Library.addLabel(tab11, "Server Time: Calculating...")
getgenv().speedLabel = Library.addLabel(tab11, "Speed: Calculating...")
getgenv().positionLabel = Library.addLabel(tab11, "Position: Calculating...")
getgenv().memoryLabel = Library.addLabel(tab11, "Memory: Calculating...")

getgenv().lastTick = tick()
getgenv().fps = 0

getgenv().runService.Heartbeat:Connect(function()
    getgenv().fps = math.floor(1 / (tick() - getgenv().lastTick))
    getgenv().lastTick = tick()
end)

getgenv().UpdateStats = function()
    local ping = getgenv().stats.Network and getgenv().stats.Network.ServerStatsItem and getgenv().stats.Network.ServerStatsItem["Data Ping"] and getgenv().stats.Network.ServerStatsItem["Data Ping"]:GetValue() or 0
    local timeNow = os.date("*t")
    local formattedTime = string.format("%02d:%02d:%02d", timeNow.hour, timeNow.min, timeNow.sec)
    local GameTime = math.floor(workspace.DistributedGameTime + 0.5)
    local Hour = math.floor(GameTime / 3600) % 24
    local Minute = math.floor(GameTime / 60) % 60
    local Second = GameTime % 60
    local formattedServerTime = string.format("%02d:%02d:%02d", Hour, Minute, Second)
    local velocity = getgenv().humanoidRootPart and getgenv().humanoidRootPart.Velocity.Magnitude or 0
    local position = getgenv().humanoidRootPart and getgenv().humanoidRootPart.Position or Vector3.new(0, 0, 0)
    local memoryUsage = math.floor(collectgarbage("count") / 1024)
    local playerName = getgenv().player.Name
    local displayName = getgenv().player.DisplayName

    if getgenv().playerNameLabel then
        getgenv().playerNameLabel:Set("Player Name: " .. playerName)
    end
    if getgenv().displayNameLabel then
        getgenv().displayNameLabel:Set("Display Name: " .. displayName)
    end
    if getgenv().fpsLabel then
        getgenv().fpsLabel:Set("FPS: " .. getgenv().fps)
    end
    if getgenv().pingLabel then
        getgenv().pingLabel:Set("Ping: " .. ping .. " ms")
    end
    if getgenv().localTimeLabel then
        getgenv().localTimeLabel:Set("Local Time: " .. formattedTime)
    end
    if getgenv().serverTimeLabel then
        getgenv().serverTimeLabel:Set("Server Time: " .. formattedServerTime)
    end
    if getgenv().speedLabel then
        getgenv().speedLabel:Set("Speed: " .. math.floor(velocity) .. " u/s")
    end
    if getgenv().positionLabel then
        getgenv().positionLabel:Set(string.format("Position: X=%.2f, Y=%.2f, Z=%.2f", position.X, position.Y, position.Z))
    end
    if getgenv().memoryLabel then
        getgenv().memoryLabel:Set("Memory: " .. memoryUsage .. " MB")
    end
end

task.spawn(function()
    while task.wait(1) do
        getgenv().humanoidRootPart = getgenv().player.Character and getgenv().player.Character:FindFirstChild("HumanoidRootPart")
        pcall(getgenv().UpdateStats)
    end
end)

Library.addSection(tab13, "TROLS TAB")

Library.addButton(tab13, "Anti Bang", "", function()
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
workspace.FallenPartsDestroyHeight = -1000
local lastCFrame = hrp.CFrame
hrp.CFrame = CFrame.new(Vector3.new(0, -500, 0))
task.wait(0.7)
hrp.CFrame = lastCFrame
workspace.FallenPartsDestroyHeight = -500
end)

local animationId = "10714068222"

Library.addTextbox(tab13, "put the player's name for the bang", "Enter target name", "", function(inputText)
    targetName = inputText:lower()
end)

Library.addToggle(tab13, "activate bang", "Start", false, function(state)
    if not state then
        following = false
        
        if activeAnimation then
            activeAnimation:Stop()
            activeAnimation = nil
        end
    else
        targetPlayer = nil
        
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(targetName) or player.DisplayName:lower():find(targetName) then
                targetPlayer = player
                break
            end
        end
        
        if targetPlayer and targetPlayer.Character then
            following = true
            
            local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local animation = Instance.new("Animation")
                animation.AnimationId = "rbxassetid://" .. animationId  -- Ahora se usa un valor v√°lido para animationId
                activeAnimation = humanoid:LoadAnimation(animation)
                activeAnimation:Play()
                activeAnimation:AdjustSpeed(2)
            end

            coroutine.wrap(function()
                local lastPosition = nil
                while following do
                    local targetCharacter = targetPlayer.Character
                    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                        local targetHRP = targetCharacter.HumanoidRootPart
                        local targetPosition = targetHRP.Position
                        local targetLookVector = targetHRP.CFrame.LookVector

                        local forwardCFrame = targetHRP.CFrame * CFrame.new(0, 0, 1)
                        local backwardCFrame = targetHRP.CFrame * CFrame.new(0, 0, 2.5)

                        local tweenForward = TweenService:Create(
                            LocalPlayer.Character:FindFirstChild("HumanoidRootPart"),
                            TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),
                            {CFrame = forwardCFrame}
                        )
                        tweenForward:Play()
                        tweenForward.Completed:Wait()

                        local tweenBackward = TweenService:Create(
                            LocalPlayer.Character:FindFirstChild("HumanoidRootPart"),
                            TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),
                            {CFrame = backwardCFrame}
                        )
                        tweenBackward:Play()
                        tweenBackward.Completed:Wait()

                        lastPosition = targetPosition
                    else
                        following = false
                        break
                    end
                end
            end)()
        else
            print("Target not found!")
        end
    end
end)

Library.addButton(tab13, "fling all", "Fling a todos", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/HpNf0TYX"))()
end)

Library.addButton(tab13, "Fling murderer", "", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/YKTYp5Dn"))()
end)

Library.addButton(tab13, "Fling sheriff", "", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/Lx8UkvVv"))()
end)

Library.addSection(tab12, "PREMIUM")


Library.addSection(tab1, "Knife Silent aim")

getgenv().KnifeSilentAim = {CurrentPrediction = Vector3.zero}
getgenv().KnifeAimEnabled = false
getgenv().KnifeTargetingMode = "Normal"
getgenv().KnifeUseFOV = false
getgenv().KnifeShowPrediction = false
getgenv().KnifeShowFOV = false
getgenv().KnifeFOVSize = 90
getgenv().KnifeFOVColor = Color3.fromRGB(255, 0, 0)

local predictionIntervalHorizontal = 16

local Circle = Drawing.new("Circle")
Circle.Color = getgenv().KnifeFOVColor
Circle.Radius = getgenv().KnifeFOVSize
Circle.Thickness = 1
Circle.Filled = false
Circle.Visible = getgenv().KnifeShowFOV

local PredictionIndicator = Drawing.new("Circle")
PredictionIndicator.Color = Color3.new(0,1,0)
PredictionIndicator.Radius = 4
PredictionIndicator.Thickness = 1
PredictionIndicator.Filled = false
PredictionIndicator.Visible = false

local function UpdateCirclePosition()
    Circle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
end

UpdateCirclePosition()
Camera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateCirclePosition)

Library.addToggle(tab1, "Knife Silent Aim", "", false, function(state)
    getgenv().KnifeAimEnabled = state
end)

Library.addDropdown(tab1, "Knife Aiming Mode", "Normal", {"Normal", "Prioritize the Sheriff"}, function(selected)
    getgenv().KnifeTargetingMode = selected
end)

Library.addToggle(tab1, "Select Target Inside FOV", "Seleccionar objetivo dentro del fov", false, function(state)
    getgenv().KnifeUseFOV = state
end)

Library.addToggle(tab1, "Show Prediction", "Mostrar predicci√≥n", false, function(state)
    getgenv().KnifeShowPrediction = state
    PredictionIndicator.Visible = state
end)

Library.addToggle(tab1, "Show FOV Circle", "Mostrar c√≠rculo fov", false, function(state)
    getgenv().KnifeShowFOV = state
    Circle.Visible = state
end)

Library.addTextbox(tab1, "FOV Size", "90", "90", function(inputText)
    local newSize = tonumber(inputText)
    if newSize then
        getgenv().KnifeFOVSize = math.clamp(newSize, 50, 500)
        Circle.Radius = getgenv().KnifeFOVSize
    end
end)

Library.AddColorPicker(tab1, "Color FOV", Color3.fromRGB(255, 0, 0), function(color)
    getgenv().KnifeFOVColor = color
    Circle.Color = color
end)

Library.addTextbox(tab1, "Knife/Prediction Interval Horizontal", tostring(predictionIntervalHorizontal), "", function(inputText)
    local value = tonumber(inputText)
    if value then
        predictionIntervalHorizontal = math.clamp(value, 1, 100)
    end
end)

local function HasGun(player)
    local Backpack = player:FindFirstChild("Backpack")
    local Character = player.Character
    return (Backpack and Backpack:FindFirstChild("Gun")) or (Character and Character:FindFirstChild("Gun"))
end

local function IsInsideFOV(targetPos)
    if not getgenv().KnifeUseFOV then return true end
    local screenPos, onScreen = Camera:WorldToViewportPoint(targetPos)
    if onScreen then
        local distance = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)).Magnitude
        return distance <= getgenv().KnifeFOVSize
    end
    return false
end

local function GetKnifeTarget()
    local ClosestPlayer, ClosestDistance = nil, math.huge
    local LocalRoot = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart
    if not LocalRoot then return end

    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            local TargetRoot = Player.Character and Player.Character.PrimaryPart
            if TargetRoot then
                local Distance = (LocalRoot.Position - TargetRoot.Position).Magnitude
                if IsInsideFOV(TargetRoot.Position) and Distance < ClosestDistance then
                    if getgenv().KnifeTargetingMode == "Prioritize the Sheriff" and HasGun(Player) then
                        return Player
                    elseif getgenv().KnifeTargetingMode == "Normal" then
                        ClosestPlayer, ClosestDistance = Player, Distance
                    end
                end
            end
        end
    end
    return ClosestPlayer
end

local function GetKnifePrediction()
    if not getgenv().KnifeAimEnabled then return nil end
    local Target = GetKnifeTarget()
    if Target then
        local TargetRoot = Target.Character and Target.Character.PrimaryPart
        if TargetRoot then
            local TargetVelocity = TargetRoot.AssemblyLinearVelocity
            local PredictionFactor = predictionIntervalHorizontal / 100
            local PredictedPosition = TargetRoot.Position + Vector3.new(TargetVelocity.X, 0, TargetVelocity.Z) * PredictionFactor

            if getgenv().KnifeShowPrediction then
                local ScreenPos, OnScreen = Camera:WorldToViewportPoint(PredictedPosition)
                if OnScreen then
                    PredictionIndicator.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                    PredictionIndicator.Visible = true
                else
                    PredictionIndicator.Visible = false
                end
            end
            
            return PredictedPosition
        end
    end
    PredictionIndicator.Visible = false
    return nil
end

RunService.RenderStepped:Connect(function()
    if getgenv().KnifeAimEnabled then
        getgenv().KnifeSilentAim.CurrentPrediction = GetKnifePrediction() or getgenv().KnifeSilentAim.CurrentPrediction
    end
end)

Library.addLabel(tab1, "Gun silent aim")

getgenv().SharpnessMultiplier = 0.5
getgenv().GunSilentAim = {CurrentPrediction = Vector3.zero}
getgenv().SilentAimEnabled = false
getgenv().GunSharpnessEnabled = false
getgenv().PredictionType = "Dynamic"
getgenv().ShowPredictionIndicator = false

local predictionIntervalHorizontal = 12
local predictionIntervalVertical = 5

local PredictionIndicator = Drawing.new("Circle")
PredictionIndicator.Color = Color3.new(0,0,1)
PredictionIndicator.Radius = 4
PredictionIndicator.Thickness = 1
PredictionIndicator.Filled = false
PredictionIndicator.Visible = false

Library.addToggle(tab1, "Gun Silent Aim", "", false, function(state)
    getgenv().SilentAimEnabled = state
end)

Library.addToggle(tab1, "Gun Sharpness Shooter", "Pistola afilado", false, function(state)
    getgenv().GunSharpnessEnabled = state
end)

Library.addToggle(tab1, "Show Prediction Indicator", "Ver predicci√≥n", false, function(state)
    getgenv().ShowPredictionIndicator = state
    PredictionIndicator.Visible = state
end)

Library.addDropdown(tab1, "Gun Prediction Type", "Dynamic", {"Dynamic", "Static", "With Ping"}, function(selected)
    getgenv().PredictionType = selected
end)

Library.addTextbox(tab1, "Prediction Interval Horizontal", tostring(predictionIntervalHorizontal), "", function(inputText)
    local value = tonumber(inputText)
    if value then predictionIntervalHorizontal = math.clamp(value,1,100) end
end)

Library.addTextbox(tab1, "Prediction Interval Vertical", tostring(predictionIntervalVertical), "", function(inputText)
    local value = tonumber(inputText)
    if value then predictionIntervalVertical = math.clamp(value,1,100) end
end)

local function HasKnife(player)
    local Backpack = player:FindFirstChild("Backpack")
    local Character = player.Character
    return (Backpack and Backpack:FindFirstChild("Knife")) or (Character and Character:FindFirstChild("Knife"))
end

local function GetClosestGunTarget()
    local ClosestPlayer, ClosestDistance = nil, math.huge
    local LocalRoot = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart
    if not LocalRoot then return end

    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            local TargetRoot = Player.Character and Player.Character.PrimaryPart
            if TargetRoot then
                local Distance = (LocalRoot.Position - TargetRoot.Position).Magnitude
                if Distance < ClosestDistance and HasKnife(Player) then
                    ClosestPlayer, ClosestDistance = Player, Distance
                end
            end
        end
    end
    return ClosestPlayer
end

local function GetGunPrediction()
    if not getgenv().SilentAimEnabled then return nil end
    local LocalRoot = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart
    if not LocalRoot then return end

    local Target = GetClosestGunTarget()
    if Target then
        local TargetRoot = Target.Character and Target.Character.PrimaryPart
        if TargetRoot then
            local Prediction = TargetRoot.Position
            local TargetVelocity = TargetRoot.AssemblyLinearVelocity

            if getgenv().PredictionType == "Dynamic" then
                Prediction = Prediction + (TargetVelocity * (predictionIntervalHorizontal / 100)) + Vector3.new(0, predictionIntervalVertical / 100, 0)
            end

            if getgenv().GunSharpnessEnabled then
                Prediction = Prediction:Lerp(TargetRoot.Position, getgenv().SharpnessMultiplier)
            end

            if getgenv().ShowPredictionIndicator then
                PredictionIndicator.Position = Vector2.new(Prediction.X, Prediction.Y)
                PredictionIndicator.Visible = true
            else
                PredictionIndicator.Visible = false
            end

            return Prediction
        end
    end
    return nil
end

local Camera = workspace.CurrentCamera

RunService.RenderStepped:Connect(function()
    if getgenv().SilentAimEnabled then
        local Prediction = GetGunPrediction()
        getgenv().GunSilentAim.CurrentPrediction = Prediction or getgenv().GunSilentAim.CurrentPrediction

        if getgenv().ShowPredictionIndicator and Prediction then
            local ScreenPosition, OnScreen = Camera:WorldToViewportPoint(Prediction)
            if OnScreen then
                PredictionIndicator.Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y)
                PredictionIndicator.Visible = true
            else
                PredictionIndicator.Visible = false
            end
        else
            PredictionIndicator.Visible = false
        end
    else
        PredictionIndicator.Visible = false
    end
end)

local OldNameCall
OldNameCall = hookmetamethod(game, "__namecall", function(Object, ...)
    local NamecallMethod = getnamecallmethod()
    local Arguments = {...}

    if getgenv().KnifeAimEnabled and NamecallMethod == "FireServer" and tostring(Object) == "Throw" then
        local Success, Error = pcall(function()
            Arguments[1] = CFrame.new(getgenv().KnifeSilentAim.CurrentPrediction)
        end)
        if Error then warn("Error! :", Error) end
        return OldNameCall(Object, unpack(Arguments))
    end

    if getgenv().SilentAimEnabled and NamecallMethod == "InvokeServer" and tostring(Object) == "RemoteFunction" then
        local Success, Error = pcall(function()
            Arguments[2] = getgenv().GunSilentAim.CurrentPrediction
        end)
        if Error then warn("Error! :", Error) end
        return OldNameCall(Object, unpack(Arguments))
    end

    return OldNameCall(Object, unpack(Arguments))
end)

Library.addButton(tab1, "teleport and shoot the Murderer", "teletransporte y disparar al asesino", function()
local coreGui = game:GetService("CoreGui")
if coreGui:FindFirstChild("tpshoot") then
    return
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local getRandomPlayer

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "tpshoot"
screenGui.Parent = coreGui

local button = Instance.new("TextButton")
button.Name = "Button"
button.Size = UDim2.new(0, 60, 0, 60)
button.Position = UDim2.new(0.85, -50, 0.15, -50)
button.Text = "Tp Shoot"
button.Font = Enum.Font.Gotham
button.TextSize = 10
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.BackgroundColor3 = Color3.fromRGB(138, 43, 250)
button.BackgroundTransparency = 0.7
button.Draggable = true
button.BorderSizePixel = 0
button.AutoButtonColor = true
button.Parent = screenGui

local uicorner = Instance.new("UICorner")
uicorner.CornerRadius = UDim.new(0, 3)
uicorner.Parent = button

local function getCharacterRootPart(character)
    if character and character:FindFirstChild("HumanoidRootPart") then
        return character.HumanoidRootPart
    end
    return nil
end

local function EquipGun()
    local gunInBackpack = LocalPlayer.Backpack:FindFirstChild("Gun")
    if gunInBackpack then
        gunInBackpack.Parent = LocalPlayer.Character
        
        local character = LocalPlayer.Character
        local rootPart = getCharacterRootPart(character)
        if not rootPart then
            warn("No se encontr√≥ HumanoidRootPart")
            return false
        end
        
        if not character.PrimaryPart then
            character.PrimaryPart = rootPart
        end

        local originalPosition = rootPart.Position
        
        local target = getRandomPlayer()
        if target and target.Character then
            local targetRoot = getCharacterRootPart(target.Character)
            if targetRoot then
                local backwardPosition = targetRoot.Position - targetRoot.CFrame.LookVector * 3
                character:SetPrimaryPartCFrame(CFrame.new(backwardPosition))
                
                task.delay(.7, function()
                    if character and character.PrimaryPart then
                        character:SetPrimaryPartCFrame(CFrame.new(originalPosition))
                    end
                end)
            end
        end

        task.delay(.4, function()
            if gunInBackpack.Parent == character then
                gunInBackpack.Parent = LocalPlayer.Backpack
            end
        end)
        
        return true
    end
    return false
end

local function hasKnife(player)
    if player.Character and player.Character:FindFirstChild("Knife") and player.Character:FindFirstChild("Knife"):IsA("Tool") then
        return true
    end
    local backpack = player:FindFirstChild("Backpack")
    if backpack and backpack:FindFirstChild("Knife") and backpack:FindFirstChild("Knife"):IsA("Tool") then
        return true
    end
    return false
end

getRandomPlayer = function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and hasKnife(player) then
            return player
        end
    end
    return nil
end

local function shootAtPlayer()
    local target = getRandomPlayer()
    if target and target.Character then
        local targetRoot = getCharacterRootPart(target.Character)
        if targetRoot then
            local forwardVector = targetRoot.CFrame.LookVector
            local predictionIntervalHorizontal = 0.1
            local predictionIntervalVertical = -1
            local adjustmentFactor = forwardVector * 0.3

            local predictedPosition = targetRoot.Position
                + targetRoot.AssemblyLinearVelocity * predictionIntervalHorizontal
                + Vector3.new(0, predictionIntervalVertical, 0)
                + adjustmentFactor

            local args = {
                [1] = 1,
                [2] = predictedPosition,
                [3] = "AH2"
            }

            local character = LocalPlayer.Character
            if character then
                local gun = character:FindFirstChild("Gun")
                if gun and gun:FindFirstChild("KnifeLocal") and gun.KnifeLocal:FindFirstChild("CreateBeam") then
                    gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
                end
            end
        end
    end
end

button.MouseButton1Click:Connect(function()
    if EquipGun() then
        for i = 1, 5 do
            task.spawn(function()
                task.wait(.3)
                shootAtPlayer()
            end)
        end
    end
end)
end)

Library.addLabel(tab1, "Auto shoot to murderer")

local g = getgenv()
g.autoShootEnabled = false
g.shootOffset = 2
g.detectionRange = 100
g.shootMode = 1
g.shootDelay = 1.1
g.lastShootTime = 0

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

Library.addToggle(tab1, "Auto Shoot murderer", "beta", false, function(val)
    g.autoShootEnabled = val
end)

Library.addDropdown(tab1, "Select Shoot Mode", "visible", {"visible", "visible&Knife"}, function(selected)
    if selected == "visible" then
        g.shootMode = 1
    elseif selected == "visible&Knife" then
        g.shootMode = 2
    end
end)

local function getPredictedPosition(player, shootOffset)
    local playerChar = player.Character
    if not playerChar then
        return Vector3.new(0, 0, 0)
    end
    local playerHRP = playerChar:FindFirstChild("UpperTorso")
    local playerHum = playerChar:FindFirstChild("Humanoid")
    if not playerHRP or not playerHum then
        return Vector3.new(0, 0, 0)
    end
    local velocity = playerHRP.AssemblyLinearVelocity
    local playerMoveDirection = playerHum.MoveDirection
    local predictedPosition = playerHRP.Position + (velocity * Vector3.new(0, 0.5, 0)) * (shootOffset / 15) + playerMoveDirection * shootOffset
    return predictedPosition
end

local function hasKnife(player)
    if player.Character and player.Character:FindFirstChild("Knife") and player.Character:FindFirstChild("Knife"):IsA("Tool") then
        return true
    end
    local backpack = player:FindFirstChild("Backpack")
    if backpack and backpack:FindFirstChild("Knife") and backpack:FindFirstChild("Knife"):IsA("Tool") then
        return true
    end
    return false
end

local function findClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("UpperTorso") and hasKnife(player) then
            local distance = (LocalPlayer.Character.UpperTorso.Position - player.Character.UpperTorso.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end
    return closestPlayer, closestDistance
end

local function equipGun()
    local character = LocalPlayer.Character
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local tools = {character:GetChildren(), backpack:GetChildren()}
    for _, toolList in ipairs(tools) do
        for _, tool in ipairs(toolList) do
            if tool:IsA("Tool") and tool.Name == "Gun" then
                if tool.Parent == backpack then
                    tool.Parent = character
                end
                return tool
            end
        end
    end
    return nil
end

local function raycastToTarget(targetPosition)
    local character = LocalPlayer.Character
    if not character then return nil end
    local head = character:FindFirstChild("Head")
    if not head then return nil end
    local origin = head.Position
    local direction = (targetPosition - origin).Unit * 1000
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local rayResult = workspace:Raycast(origin, direction, raycastParams)
    return rayResult
end

local function shootAtTarget(targetPlayer, mode)
    local predictedPos = getPredictedPosition(targetPlayer, g.shootOffset)
    local rayResult = raycastToTarget(predictedPos)
    if rayResult and rayResult.Instance then
        local hitPart = rayResult.Instance
        local targetCharacter = targetPlayer.Character
        if targetCharacter and targetCharacter:FindFirstChild("UpperTorso") then
            local isTargetVisible = hitPart:IsDescendantOf(targetCharacter)
            if mode == 1 then
                if isTargetVisible then
                    local currentTime = tick()
                    if currentTime - g.lastShootTime >= g.shootDelay then
                        local gun = equipGun()
                        if gun and gun:FindFirstChild("KnifeLocal") and gun.KnifeLocal:FindFirstChild("CreateBeam") and gun.KnifeLocal.CreateBeam:FindFirstChild("RemoteFunction") then
                            local args = {1, predictedPos, "AH2"}
                            gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
                            g.lastShootTime = currentTime
                        end
                    end
                end
            elseif mode == 2 then
                if isTargetVisible and targetCharacter:FindFirstChild("Knife") then
                    local currentTime = tick()
                    if currentTime - g.lastShootTime >= g.shootDelay then
                        local gun = equipGun()
                        if gun and gun:FindFirstChild("KnifeLocal") and gun.KnifeLocal:FindFirstChild("CreateBeam") and gun.KnifeLocal.CreateBeam:FindFirstChild("RemoteFunction") then
                            local args = {1, predictedPos, "AH2"}
                            gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
                            g.lastShootTime = currentTime
                        end
                    end
                end
            end
        end
    end
end

RunService.Heartbeat:Connect(function(delta)
    if g.autoShootEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then
        local targetPlayer, distance = findClosestPlayer()
        if targetPlayer and distance < g.detectionRange then
            local isTargetVisible = raycastToTarget(targetPlayer.Character.UpperTorso.Position)
            if isTargetVisible then
                shootAtTarget(targetPlayer, g.shootMode)
            end
        end
    end
end)
Library.addLabel(tab1, "shoot with button")
local button = nil

Library.addButton(tab1, "Shoot the murderer (Button)", "Disparar al murderer (botton)", function()
local coreGui = game:GetService("CoreGui")
    if coreGui:FindFirstChild("ShootMurdererGui") then 
        return 
    end
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ShootMurdererGui"
    screenGui.Parent = coreGui
    button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.new(0, 130, 0, 100)
    button.Position = UDim2.new(0.85, -50, 0.15, -50)
    button.Text = "Shoot"
    button.Font = Enum.Font.Gotham
    button.TextSize = 13
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(138, 43, 250)
    button.BackgroundTransparency = 0.7
    button.Draggable = true
    button.BorderSizePixel = 0
    button.AutoButtonColor = true
    button.Parent = screenGui
    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(0, 5)
    uicorner.Parent = button

local function getCharacterRootPart(character)
    return character and (character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso"))
end

local function EquipGun()
    local gunInBackpack = LocalPlayer.Backpack:FindFirstChild("Gun")
    if gunInBackpack then
        gunInBackpack.Parent = LocalPlayer.Character
        task.delay(0.2, function()
            if gunInBackpack.Parent == LocalPlayer.Character then
                gunInBackpack.Parent = LocalPlayer.Backpack
            end
        end)
        return true
    end
    return false
end

local function hasKnife(player)
    return player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife"))
end

local function getKnifePlayer()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and hasKnife(player) and player.Character then
            return player
        end
    end
    return nil
end

local function shootAtKnifePlayer()
    local target = getKnifePlayer()
    if target and target.Character then
        local targetRoot = getCharacterRootPart(target.Character)
        if targetRoot then
            local forwardVector = targetRoot.CFrame.LookVector
            local predictionIntervalHorizontal = 0.1
            local predictionIntervalVertical = -1
            local adjustmentFactor = forwardVector * 0.6

            local predictedPosition = targetRoot.Position 
                + targetRoot.AssemblyLinearVelocity * predictionIntervalHorizontal 
                + Vector3.new(0, predictionIntervalVertical, 0)
                + adjustmentFactor

            local args = {
                [1] = 1,
                [2] = predictedPosition,
                [3] = "AH2"
            }

            local character = LocalPlayer.Character
            if character then
                local gun = character:FindFirstChild("Gun")
                if gun and gun:FindFirstChild("KnifeLocal") and gun.KnifeLocal:FindFirstChild("CreateBeam") then
                    gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
                end
            end
        end
    end
end

button.MouseButton1Click:Connect(function()
    if EquipGun() then
        for i = 1, 5 do
            task.spawn(function()
                shootAtKnifePlayer()
            end)
        end
    end
end)
end)

Library.addToggle(tab1, "bot√≥n shoot Draggable", "poder deslizar el bot√≥n o no", function()
    return button and button.Draggable or false
end, function(state)
    if button then
        button.Draggable = state
    end
end)

Library.addTextbox(tab1, "Enter Button Size", "Escribe el tama√±o del bot√≥n", "130", function(inputText)
    local size = tonumber(inputText)
    if size then
        local aspectRatio = 100 / 130
        button.Size = UDim2.new(0, size, 0, size * aspectRatio)
    end
end)

Library.addTextbox(tab1, "Enter Transparency", "Escribe la transparencia", "0.7", function(inputText)
    local transparency = tonumber(inputText)
    if transparency then
        button.BackgroundTransparency = transparency
    end
end)

Library.addButton(tab1, "Remove Button", "destruir el bot√≥n", function()
    if button then
        button:Destroy()
        button = nil
    end
end)

Library.addLabel(tab1, "For Murderer")

local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer

local knifeEquipped = false
local auraActive = false
local dist = getgenv().nearestDistance or 7.3
local auraConn
local hrp

local function getHRP(char)
    return char and char:WaitForChild("Head", 2)
end

player.CharacterAdded:Connect(function(char)
    hrp = getHRP(char)
end)

if player.Character then
    hrp = getHRP(player.Character)
end

local function equipK()
    local k = player.Backpack:FindFirstChild("Knife")
    if not knifeEquipped and k then
        k.Parent = player.Character
        knifeEquipped = true
        task.wait(0.5)
    end
end

local function unequipK()
    local k = player.Character:FindFirstChild("Knife")
    if knifeEquipped and k then
        k.Parent = player.Backpack
        knifeEquipped = false
        task.wait(1)
    end
end

local function findNearest()
    local nearest = nil
    for _, other in ipairs(game.Players:GetPlayers()) do
        if other ~= player and other.Character then
            local otherHRP = other.Character:FindFirstChild("HumanoidRootPart")
            if otherHRP then
                local d = (hrp.Position - otherHRP.Position).Magnitude
                if d <= dist then
                    nearest = other
                    break
                end
            end
        end
    end
    return nearest
end

local function handleAura()
    if not auraActive or not hrp then
        return
    end

    local target = findNearest()
    if target then
        equipK()
        if knifeEquipped then
            local args = { [1] = 1 }
            game:GetService("Players").LocalPlayer.Character.Knife.KnifeServer.SlashStart:FireServer(unpack(args))
        end
    else
        unequipK()
    end
end

local function startAura()
    if auraConn then auraConn:Disconnect() end
    auraActive = true
    auraConn = RunService.Heartbeat:Connect(handleAura)
end

local function stopAura()
    auraActive = false
    unequipK()
    if auraConn then auraConn:Disconnect() end
end

Library.addToggle(tab1, "Knife aura", "", false, function(state)
    if state then
        startAura()
    else
        stopAura()
    end
end)

Library.addTextbox(tab1, "Equpe Knife distance", "", "7.3", function(inputText)
    local success, newDist = pcall(function() return tonumber(inputText) end)
    if success and newDist then
        dist = newDist
        getgenv().nearestDistance = dist
    end
end)

Library.addToggle(tab1, "auto Kill all (Be a murderer)", "Auto matar a todos (ser asesino)", false, function(state)
    local autokillallloop = state

    while autokillallloop do
        local localCharacter = game.Players.LocalPlayer.Character
        local knife = localCharacter and localCharacter:FindFirstChild("Knife")

        if knife then
            local stabEvent = knife:FindFirstChild("Stab")
            
            if stabEvent then
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer then
                        local playerCharacter = player.Character
                        local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                        if humanoidRootPart then
                            local args = {
                                [1] = "Slash"
                            }
                            stabEvent:FireServer(unpack(args))
                            firetouchinterest(humanoidRootPart, knife.Handle, 1)
                            firetouchinterest(humanoidRootPart, knife.Handle, 0)
                        end
                    end
                end
            end
        end

       task.wait(0.1)
    end
end)

Library.addButton(tab1, "Kill all (be murderer) ", "Matar a todos (ser murderer)", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:FindFirstChild("Backpack")

local knife = character:FindFirstChild("Knife") or (backpack and backpack:FindFirstChild("Knife"))

if knife and knife.Parent == backpack then
    knife.Parent = character 
    repeat task.wait() until knife.Parent == character
end

if knife and knife.Parent == character then
    local stabEvent = knife:FindFirstChild("Stab")
    
    if stabEvent then
        for _, target in ipairs(game.Players:GetPlayers()) do
            if target ~= player then
                local targetCharacter = target.Character
                local humanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

                if humanoidRootPart then
                    stabEvent:FireServer("Slash")
                    firetouchinterest(humanoidRootPart, knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, knife.Handle, 0)
                end
            end
        end
    end
end
end)

Library.addButton(tab1, "Kill Sheriff/Hero (be murderer) ", "Matar a Sheriff/Hero (ser murderer)", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:FindFirstChild("Backpack")

local knife = character:FindFirstChild("Knife") or (backpack and backpack:FindFirstChild("Knife"))

if knife and knife.Parent == backpack then
    knife.Parent = character
    repeat task.wait() until knife.Parent == character
end

if knife and knife.Parent == character then
    local stabEvent = knife:FindFirstChild("Stab")

    if stabEvent then
        for _, target in ipairs(game.Players:GetPlayers()) do
            if target ~= player then
                local targetCharacter = target.Character
                local targetBackpack = target:FindFirstChild("Backpack")

                local hasGun = (targetCharacter and targetCharacter:FindFirstChild("Gun")) or 
                               (targetBackpack and targetBackpack:FindFirstChild("Gun"))

                if hasGun then
                    local humanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

                    if humanoidRootPart then
                        stabEvent:FireServer("Slash")
                        firetouchinterest(humanoidRootPart, knife.Handle, 1)
                        firetouchinterest(humanoidRootPart, knife.Handle, 0)
                    end
                end
            end
        end
    end
end
end)
 
Library.addLabel(tab1, "Cam aimbot")
 
Library.addToggle(tab1, "Cam Aimbot murderer", "Aimbot al asesino", false, function(state)
    getgenv().aimbotEnabled = state
end)

local RS, Players, ReplicatedStorage = game:GetService("RunService"), game:GetService("Players"), game:GetService("ReplicatedStorage")
local LP, Camera = Players.LocalPlayer, workspace.CurrentCamera

RS.RenderStepped:Connect(function()
    if not getgenv().aimbotEnabled then return end
    
    local target = nil
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()

    for name, data in pairs(roles or {}) do
        if data.Role == "Murderer" and name ~= LP.Name then
            target = Players:FindFirstChild(name)
            break
        end
    end

    if target and target.Character then
        local rootPart = target.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local dirToTarget = (LP.Character.HumanoidRootPart.Position - rootPart.Position).Unit
            local targetPos = rootPart.Position + rootPart.CFrame.LookVector * 3
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
        end
    end
end)

getgenv().DodgeKnife = false

local teleportRadius = 9
local detectionRadius = 25
local descendantConnection
local heartbeatConnection
local activeKnives = {}

local function removeAllKnives()
    for _, knife in ipairs(workspace:GetChildren()) do
        if knife:IsA("Model") and knife.Name == "ThrowingKnife" then
            knife:Destroy()
        end
    end
end

local function teleportPlayer(knife)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if localPlayer.Backpack:FindFirstChild("Knife") or localPlayer.Character:FindFirstChild("Knife") then
            return
        end

        local playerPos = localPlayer.Character.HumanoidRootPart.Position
        local bladePart = knife:FindFirstChild("BladePosition")

        if bladePart and bladePart:IsA("BasePart") then
            local knifePos = bladePart.Position
            local distance = (playerPos - knifePos).Magnitude

            if distance <= teleportRadius then
                local direction = (playerPos - knifePos).unit
                local perpendicularDirection = Vector3.new(-direction.Z, 0, direction.X)
                local safePosition = knifePos + perpendicularDirection * teleportRadius
                local targetPosition = Vector3.new(safePosition.X, playerPos.Y, safePosition.Z)

                localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end
        end
    end
end

local function onKnifeAdded(knife)
    if knife:IsA("Model") and knife.Name == "ThrowingKnife" then
        table.insert(activeKnives, knife)
    end
end

local function updateKnives()
    for _, knife in ipairs(activeKnives) do
        if knife.Parent then
            local bladePart = knife:FindFirstChild("BladePosition")

            if bladePart and bladePart:IsA("BasePart") then
                local knifePos = bladePart.Position
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local playerPos = localPlayer.Character.HumanoidRootPart.Position
                    local distance = (playerPos - knifePos).Magnitude
                    if distance <= detectionRadius then
                        teleportPlayer(knife)
                    end
                end
            end
        end
    end
end

local function toggleDetection()
    if getgenv().DodgeKnife then
        removeAllKnives()
        activeKnives = {}

        descendantConnection = workspace.DescendantAdded:Connect(onKnifeAdded)
        heartbeatConnection = RunService.Heartbeat:Connect(updateKnives)
    else
        if descendantConnection then descendantConnection:Disconnect() end
        if heartbeatConnection then heartbeatConnection:Disconnect() end
        activeKnives = {}
    end
end

Library.addToggle(tab1, "Dodge Throw knife", "Esquivar cuchillo lanzado", false, function(state)
    getgenv().DodgeKnife = state
    toggleDetection()
end)

toggleDetection()
Library.addSection(tab2, "Hitbox Expander")
local set = {
    HitboxSize = 10,
    HitboxTransparency = 0.7,
    HitboxMaterial = "Plastic",
    HitboxColor = Color3.fromRGB(169, 169, 169),
    Enabled = false,
    HitboxCollision = false
}
local Players = game:GetService("Players")
local lp = Players.LocalPlayer
local orig = {}
local running = false
local modLoop

local function modHitboxes()
    running = true
    modLoop = coroutine.create(function()
        while running do
            task.wait(0.1)
            for _, p in ipairs(Players:GetPlayers()) do
                if p ~= lp then
                    pcall(function()
                        local char = p.Character
                        if char then
                            local hrp = char:FindFirstChild("HumanoidRootPart")
                            if hrp and set.Enabled then
                                if not orig[p] then
                                    orig[p] = {
                                        Size = hrp.Size,
                                        Transparency = hrp.Transparency,
                                        Color = hrp.Color,
                                        Material = hrp.Material,
                                        CanCollide = hrp.CanCollide
                                    }
                                end
                                hrp.Size = Vector3.new(set.HitboxSize, set.HitboxSize, set.HitboxSize)
                                hrp.Transparency = set.HitboxTransparency
                                hrp.Color = set.HitboxColor
                                hrp.Material = Enum.Material[set.HitboxMaterial] or hrp.Material
                                hrp.CanCollide = set.HitboxCollision
                            end
                        end
                    end)
                end
            end
        end
    end)
    coroutine.resume(modLoop)
end

local function restoreHitboxes()
    running = false
    for p, prop in pairs(orig) do
        pcall(function()
            if p and p.Character then
                local hrp = p.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.Size = prop.Size
                    hrp.Transparency = prop.Transparency
                    hrp.Color = prop.Color
                    hrp.Material = prop.Material
                    hrp.CanCollide = prop.CanCollide
                end
            end
        end)
    end
    orig = {}
end

Library.addToggle(tab2, "Hitbox Expander", "", set.Enabled, function(state)
    set.Enabled = state
    if set.Enabled then
        modHitboxes()
    else
        restoreHitboxes()
    end
end)
Library.addTextbox(tab2, "Hitbox Size", tostring(set.HitboxSize), "10", function(val)
    pcall(function()
        set.HitboxSize = tonumber(val) or set.HitboxSize
    end)
end)
Library.addTextbox(tab2, "Hitbox Transparency", tostring(set.HitboxTransparency), "0.7", function(val)
    pcall(function()
        set.HitboxTransparency = tonumber(val) or set.HitboxTransparency
    end)
end)
Library.addToggle(tab2, "Hitbox Collision", "", set.HitboxCollision, function(state)
    pcall(function()
        set.HitboxCollision = state
    end)
end)
Library.addDropdown(tab2, "Select Hitbox Material", "Plastic", {
    "Plastic", "SmoothPlastic", "Glass", "Neon", "Wood", "CorrodedMetal",
    "ForceField", "Slate", "DiamondPlate", "Granite", "Marble", "Cobblestone", "WoodenPlanks"
}, function(val)
    pcall(function()
        set.HitboxMaterial = val
    end)
end)
Library.AddColorPicker(tab2, "Select a color", set.HitboxColor, function(color)
    pcall(function()
        set.HitboxColor = color
    end)
end)
if set.Enabled then
    modHitboxes()
end

Library.addLabel(tab2, "Stab reach")

getgenv().reachKnifeActive = false
getgenv().knifeReachAdjust = 1

Library.addToggle(tab2, "Stab reach", "", false, function(state)
    getgenv().reachKnifeActive = state
    if state then
        getgenv().knifeReachAdjust = 8
    end
end)

Library.addSlider(tab2, "Stab reach adjust", 1, 255, 8, getgenv().knifeReachAdjust, function(value)
    getgenv().knifeReachAdjust = tonumber(value)
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().reachKnifeActive then
        local localPlayer = game.Players.LocalPlayer
        if localPlayer and localPlayer.Character then
            local localCharacter = localPlayer.Character
            local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
            local knife = localCharacter:FindFirstChild("Knife")
            if knife and localRoot then
                local stabEvent = knife:FindFirstChild("Stab")
                if stabEvent then
                    local closestPlayer = nil
                    local shortestDistance = getgenv().knifeReachAdjust

                    for _, player in ipairs(game.Players:GetPlayers()) do
                        if player ~= localPlayer and player.Character then
                            local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
                            if targetRoot then
                                local distance = (localRoot.Position - targetRoot.Position).Magnitude

                                if distance <= getgenv().knifeReachAdjust and distance < shortestDistance then
                                    closestPlayer = player
                                    shortestDistance = distance
                                end
                            end
                        end
                    end

                    if closestPlayer then
                        local targetRoot = closestPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if targetRoot then
                            local args = { [1] = "Slash" }
                            stabEvent:FireServer(unpack(args))
                            firetouchinterest(targetRoot, knife.Handle, 1)
                            firetouchinterest(targetRoot, knife.Handle, 0)
                        end
                    end
                end
            end
        end
    end
end)

Library.addLabel(tab2, "Throw Knife Reach")

getgenv().throwingKnifeActive = false
getgenv().throwingKnifeReach = 1

Library.addToggle(tab2, "Throw Knife Reach", "", false, function(state)
getgenv().throwingKnifeActive = state
if state then
getgenv().throwingKnifeReach = 12
print("El radio ahora es: " .. getgenv().throwingKnifeReach)
end
end)

Library.addSlider(tab2, "Throwing Knife Reach", 1, 255, 12, getgenv().throwingKnifeReach, function(value)
getgenv().throwingKnifeReach = tonumber(value)
end)

game:GetService("RunService").RenderStepped:Connect(function()
if getgenv().throwingKnifeActive then
local localPlayer = game.Players.LocalPlayer
if localPlayer and localPlayer.Character then
local localCharacter = localPlayer.Character
local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
local knife = localCharacter:FindFirstChild("Knife")
if knife and localRoot then
local stabEvent = knife:FindFirstChild("Stab")
if stabEvent then
local args = { [1] = "Slash" }
stabEvent:FireServer(unpack(args))
for _, throwingKnife in ipairs(workspace:GetChildren()) do
if throwingKnife:IsA("Model") and throwingKnife.Name == "ThrowingKnife" then
local bladePosition = throwingKnife:FindFirstChild("BladePosition")
if bladePosition then
for _, player in ipairs(game.Players:GetPlayers()) do
if player ~= localPlayer and player.Character then
local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
if targetRoot then
local distance = (bladePosition.Position - targetRoot.Position).Magnitude
if distance <= getgenv().throwingKnifeReach then
firetouchinterest(targetRoot, knife.Handle, 1)
firetouchinterest(targetRoot, knife.Handle, 0)
end
end
end
end
end
end
end
end
end
end
end
end)

getgenv().xray, getgenv().saved, getgenv().transparencyLevel = false, {}, 0.5
local player = game.Players.LocalPlayer

local function setTransparency(obj)
    for _, v in ipairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not (v.Parent:IsA("Model") and v.Parent:FindFirstChildOfClass("Humanoid") and v.Parent ~= player.Character) then
            if getgenv().xray then
                getgenv().saved[v] = getgenv().saved[v] or v.Transparency
                v.Transparency = getgenv().transparencyLevel
            else
                if getgenv().saved[v] then
                    v.Transparency, getgenv().saved[v] = getgenv().saved[v], nil
                end
            end
        end
        setTransparency(v)
    end
end

Library.addToggle(tab3, "XRay", "", false, function(state)
    getgenv().xray = state
    setTransparency(workspace)
end)

Library.addSlider(tab3, "XRay Transparency", 0, 10, 1, 1, function(value)
    getgenv().transparencyLevel = value / 10
    if getgenv().xray then setTransparency(workspace) end
end)

getgenv().seeCoins = false  
local adorns, connection = {}  

local function createAdorn(part)  
    if part:IsA("BasePart") and not adorns[part] then  
        local box = Instance.new("BoxHandleAdornment")  
        box.Size, box.Color3, box.Transparency, box.AlwaysOnTop, box.ZIndex, box.Adornee, box.Parent =   
            part.Size, Color3.fromRGB(100, 255, 100), 0.7, true, 1, part, part  
        adorns[part] = box  
    end  
end  

Library.addToggle(tab3, "See Coins", "Ver monedas", false, function(state)  
    getgenv().seeCoins = state  
    if connection then connection:Disconnect() end  
    for _, v in pairs(adorns) do v:Destroy() end  
    table.clear(adorns)  

    if state then  
        for _, container in pairs(game.Workspace:GetDescendants()) do  
            if container:IsA("Model") and container.Name == "CoinContainer" then  
                for _, part in pairs(container:GetDescendants()) do createAdorn(part) end  
            end  
        end  
        connection = game.Workspace.DescendantAdded:Connect(function(d)  
            if d:IsA("BasePart") and d.Parent and d.Parent.Name == "CoinContainer" then createAdorn(d) end  
        end)  
    end  
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

getgenv().ChamESP = false
getgenv().ChamTransparency = 0.8
getgenv().E = false
getgenv().H = false
getgenv().T = false
getgenv().eB = false
getgenv().F = 0.8
getgenv().Roles = {}

local function updateRoles()
    local success, data = pcall(function() 
        return ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer() 
    end)
    if success and data then
        getgenv().Roles = data
    end
end

task.spawn(function()
    while true do
        updateRoles()
        task.wait(1.5)
    end
end)

local function IsAlive(player)
    local roleData = getgenv().Roles[player.Name]
    return roleData and not roleData.Killed and not roleData.Dead
end

local function getRoleColor(player)
    local roleData = getgenv().Roles[player.Name]
    if roleData and IsAlive(player) then
        local role = roleData.Role
        if role == "Innocent" then
            return Color3.fromRGB(0, 128, 0)
        elseif role == "Sheriff" then
            return Color3.fromRGB(0, 0, 255)
        elseif role == "Hero" then
            return Color3.fromRGB(255, 255, 0)
        elseif role == "Murderer" then
            return Color3.fromRGB(255, 0, 0)
        end
    end
    return Color3.fromRGB(169, 169, 169)
end

local chamUpdateLoop, chamCleanupLoop
local function applyChamESP(player, color)
    if not getgenv().ChamESP then return end
    local character = player.Character
    if character then
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                local adornment = part:FindFirstChild("espAdornment")
                if not adornment then
                    adornment = Instance.new("BoxHandleAdornment")
                    adornment.Name = "espAdornment"
                    adornment.Size = part.Size
                    adornment.Adornee = part
                    adornment.AlwaysOnTop = true
                    adornment.ZIndex = 5
                    adornment.Parent = part
                end
                adornment.Color3 = color
                adornment.Transparency = getgenv().ChamTransparency
            end
        end
    end
end

local function clearChamESP()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            for _, part in pairs(character:GetChildren()) do
                local adornment = part:FindFirstChild("espAdornment")
                if adornment then
                    adornment:Destroy()
                end
            end
        end
    end
end

local function startChamESP()
    if chamUpdateLoop or chamCleanupLoop then return end
    chamUpdateLoop = task.spawn(function()
        while getgenv().ChamESP do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                local color = getRoleColor(player)
                applyChamESP(player, color)
            end
            task.wait(1)
        end
    end)
    chamCleanupLoop = task.spawn(function()
        while getgenv().ChamESP do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                if not IsAlive(player) then
                    applyChamESP(player, Color3.fromRGB(169, 169, 169))
                end
            end
            task.wait(1)
        end
    end)
end

local function stopChamESP()
    getgenv().ChamESP = false
    if chamUpdateLoop then
        task.cancel(chamUpdateLoop)
        chamUpdateLoop = nil
    end
    if chamCleanupLoop then
        task.cancel(chamCleanupLoop)
        chamCleanupLoop = nil
    end
    clearChamESP()
end

local espNameUpdateLoop, espNameCleanupLoop
local function applyESPName(player, color)
    if not getgenv().E then return end
    local character = player.Character
    if character then
        local head = character:FindFirstChild("Head")
        if head then
            local gui = head:FindFirstChild("BillboardGui")
            local textLabel
            if not gui then
                gui = Instance.new("BillboardGui")
                gui.Parent = head
                gui.Adornee = head
                gui.Size = UDim2.new(0, 65, 0, 65)
                gui.StudsOffset = Vector3.new(0, 4, 0)
                gui.AlwaysOnTop = true
                gui.ResetOnSpawn = false
                gui.Enabled = true
                textLabel = Instance.new("TextLabel")
                textLabel.Parent = gui
                textLabel.Size = UDim2.new(0, 65, 0, 65)
                textLabel.BackgroundTransparency = 1
                textLabel.TextScaled = true
                textLabel.Text = player.Name
                textLabel.TextSize = 11
            else
                textLabel = gui:FindFirstChildOfClass("TextLabel")
            end
            if textLabel then
                textLabel.TextColor3 = color
            end
        end
    end
end

local function clearESPName()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            local head = character:FindFirstChild("Head")
            if head then
                local gui = head:FindFirstChild("BillboardGui")
                if gui then
                    gui:Destroy()
                end
            end
        end
    end
end

local function startESPName()
    if espNameUpdateLoop or espNameCleanupLoop then return end
    espNameUpdateLoop = task.spawn(function()
        while getgenv().E do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                local color = getRoleColor(player)
                applyESPName(player, color)
            end
            task.wait(1)
        end
    end)
    espNameCleanupLoop = task.spawn(function()
        while getgenv().E do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                if not IsAlive(player) then
                    applyESPName(player, Color3.fromRGB(169, 169, 169))
                end
            end
            task.wait(1)
        end
    end)
end

local function stopESPName()
    getgenv().E = false
    if espNameUpdateLoop then
        task.cancel(espNameUpdateLoop)
        espNameUpdateLoop = nil
    end
    if espNameCleanupLoop then
        task.cancel(espNameCleanupLoop)
        espNameCleanupLoop = nil
    end
    clearESPName()
end

local highlightUpdateLoop, highlightCleanupLoop
local function applyHighlight(player, fillColor, outlineColor)
    if not getgenv().H then return end
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local highlight = character:FindFirstChild("Highlight")
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Parent = character
        end
        highlight.FillColor = fillColor
        highlight.FillTransparency = getgenv().F
        highlight.OutlineColor = outlineColor
    end
end

local function clearHighlight()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            local highlight = character:FindFirstChild("Highlight")
            if highlight then
                highlight:Destroy()
            end
        end
    end
end

local function startESPHighlight()
    if highlightUpdateLoop or highlightCleanupLoop then return end
    highlightUpdateLoop = task.spawn(function()
        while getgenv().H do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                local color = getRoleColor(player)
                applyHighlight(player, color, color)
            end
            task.wait(1)
        end
    end)
    highlightCleanupLoop = task.spawn(function()
        while getgenv().H do
            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end
                if not IsAlive(player) then
                    applyHighlight(player, Color3.fromRGB(169, 169, 169), Color3.fromRGB(169, 169, 169))
                end
            end
            task.wait(1)
        end
    end)
end

local function stopESPHighlight()
    getgenv().H = false
    if highlightUpdateLoop then
        task.cancel(highlightUpdateLoop)
        highlightUpdateLoop = nil
    end
    if highlightCleanupLoop then
        task.cancel(highlightCleanupLoop)
        highlightCleanupLoop = nil
    end
    clearHighlight()
end

local tracerDrawings = {}
RunService.RenderStepped:Connect(function()
    if not getgenv().T then
        for _, line in pairs(tracerDrawings) do
            line.Visible = false
        end
        return
    end
    local camera = workspace.CurrentCamera
    local cx = camera.ViewportSize.X / 2
    local cy = camera.ViewportSize.Y
    for _, player in pairs(Players:GetPlayers()) do
        if player == LocalPlayer or not player.Character then continue end
        local hrp = player.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = player.Character:FindFirstChild("Humanoid")
        if hrp and humanoid and humanoid.Health > 0 then
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local line = tracerDrawings[player]
                if not line then
                    line = Drawing.new("Line")
                    tracerDrawings[player] = line
                    line.Thickness = 1
                end
                line.From = Vector2.new(cx, cy)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Color = getRoleColor(player)
                line.Visible = true
            else
                if tracerDrawings[player] then
                    tracerDrawings[player].Visible = false
                end
            end
        elseif tracerDrawings[player] then
            tracerDrawings[player]:Remove()
            tracerDrawings[player] = nil
        end
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if tracerDrawings[player] then
        tracerDrawings[player]:Remove()
        tracerDrawings[player] = nil
    end
end)

local function drawESPBox(player)
    if player == LocalPlayer then return end
    local box = Drawing.new("Square")
    box.Visible = false
    box.Thickness = 1
    box.Filled = false
    local function updateBox()
        RunService.RenderStepped:Connect(function()
            if not getgenv().eB or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                box.Visible = false
                return
            end
            local camera = workspace.CurrentCamera
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                box.Size = Vector2.new(1000 / screenPos.Z, 1500 / screenPos.Z)
                box.Position = Vector2.new(screenPos.X - box.Size.X / 2, screenPos.Y - box.Size.Y / 2)
                box.Color = getRoleColor(player)
                box.Visible = true
            else
                box.Visible = false
            end
        end)
    end
    coroutine.wrap(updateBox)()
end

for _, player in pairs(Players:GetPlayers()) do
    drawESPBox(player)
end

Players.PlayerAdded:Connect(function(player)
    drawESPBox(player)
end)

Library.addToggle(tab3, "ESP Box", "", false, function(state)
    getgenv().eB = state
end)

Library.addToggle(tab3, "Cham ESP", "", false, function(state)
    getgenv().ChamESP = state
    if state then
        startChamESP()
    else
        stopChamESP()
    end
end)

Library.addSlider(tab3, "Cham ESP Transparency", 0, 100, 80, 1, function(value)
    getgenv().ChamTransparency = value / 100
end)

Library.addToggle(tab3, "ESP Highlight", "", false, function(state)
    getgenv().H = state
    if state then
        startESPHighlight()
    else
        stopESPHighlight()
    end
end)

Library.addSlider(tab3, "ESP Highlight Transparency", 0, 100, 80, 1, function(value)
    getgenv().F = value / 100
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if not getgenv().E then
            local head = character:FindFirstChild("Head")
            if head then
                local gui = head:FindFirstChild("BillboardGui")
                if gui then
                    gui:Destroy()
                end
            end
        end
    end)
end)

Library.addToggle(tab3, "ESP Name", "", false, function(state)
    getgenv().E = state
    if state then
        startESPName()
    else
        stopESPName()
    end
end)
Library.addToggle(tab3, "ESP Tracer", "", false, function(state)
    getgenv().T = state
    if not state then
        for _, line in pairs(tracerDrawings) do
            line:Remove()
        end
        tracerDrawings = {}
    end
end)

local LP = Players.LocalPlayer
local scriptEnabled = false

local function getPlayerRole()
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    local playerRole = nil

    for name, data in pairs(roles) do
        if name == LP.Name then
            playerRole = data.Role
            print(LP.Name .. " has the role of " .. playerRole)
            break
        end
    end

    return playerRole
end

local function showRoleLabel(role)
    local playerGui = LP:WaitForChild("PlayerGui")
    local mainGui = playerGui:WaitForChild("MainGUI")

    if mainGui:FindFirstChild("RoleLabel") then
        return
    end

    local label = Instance.new("TextLabel")
    label.Name = "RoleLabel"
    label.Size = UDim2.new(0, 200, 0, 50)
    label.Position = UDim2.new(0.5, -100, 0.1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.SourceSans
    label.TextScaled = true

    if role == "Murderer" then
        label.Text = "Murderer"
        label.TextColor3 = Color3.new(1, 0, 0)
    elseif role == "Sheriff" then
        label.Text = "Sheriff"
        label.TextColor3 = Color3.new(0, 0, 1)
    else
        label.Text = "INNOCENT"
        label.TextColor3 = Color3.new(0, 1, 0)
    end

    label.Parent = mainGui

    local function checkRoleSelectorVisibility()
        local playerGui = LP:WaitForChild("PlayerGui")
        local mainGui = playerGui:WaitForChild("MainGUI")
        local gameFrame = mainGui:WaitForChild("Game")
        local roleSelector = gameFrame:WaitForChild("RoleSelector")

        if not roleSelector.Visible then
            label:Destroy()
        end
    end

    local roleSelectorConn = RunService.Heartbeat:Connect(checkRoleSelectorVisibility)
end

local function heartbeatCheck(delta)
    if not scriptEnabled then return end

    local playerGui = LP:WaitForChild("PlayerGui")
    local mainGui = playerGui:WaitForChild("MainGUI")
    local gameFrame = mainGui:WaitForChild("Game")
    local roleSelector = gameFrame:WaitForChild("RoleSelector")

    if roleSelector.Visible then
        local role = getPlayerRole()
        if role then
            showRoleLabel(role)
        end
    end
end

local heartbeatConn = RunService.Heartbeat:Connect(heartbeatCheck)

Library.addToggle(tab3, "Instant role", "", false, function(state)
    scriptEnabled = state

    if state then
        task.spawn(function()
            local playerGui = LP:WaitForChild("PlayerGui")
            local mainGui = playerGui:WaitForChild("MainGUI")

            local role = getPlayerRole()
            if role then
                showRoleLabel(role)
            end

            if not heartbeatConn then
                heartbeatConn = RunService.Heartbeat:Connect(heartbeatCheck)
            end
        end)
    else
        if heartbeatConn then
            heartbeatConn:Disconnect()
            heartbeatConn = nil
        end

        local playerGui = LP:FindFirstChild("PlayerGui")
        local mainGui = playerGui and playerGui:FindFirstChild("MainGUI")
        if mainGui then
            local roleLabel = mainGui:FindFirstChild("RoleLabel")
            if roleLabel then
                roleLabel:Destroy()
            end
        end
    end
end)

local animations = { Ninja = { idle1 = "656117400", idle2 = "656118341", walk = "656121766", run = "656118852", jump = "656117878", climb = "656114359", fall = "656115606" }, Robot = { idle1 = "616088211", idle2 = "616089559", walk = "616095330", run = "616091570", jump = "616090535", climb = "616086039", fall = "616087089" }, Cartoonish = { idle1 = "742637544", idle2 = "742638445", walk = "742640026", run = "742638842", jump = "742637942", climb = "742636889", fall = "742637151" }, OldSchool = { idle1 = "531984432", idle2 = "531985026", walk = "531987756", run = "531986720", jump = "531985926", climb = "531983976", fall = "531984193" }, Stylish = { idle1 = "616099170", idle2 = "616100936", walk = "616102896", run = "616101847", jump = "616100296", climb = "616098711", fall = "616098135" }, Bubbly = { idle1 = "910004836", idle2 = "910009958", walk = "910034870", run = "910025107", jump = "910016857", climb = "910001910", fall = "910003713" }, Zombie = { idle1 = "616158929", idle2 = "616158929", walk = "616168557", run = "616163682", jump = "616161997", climb = "616156119", fall = "616157476" }, Superhero = { idle1 = "616111295", idle2 = "616113536", walk = "616122287", run = "616117076", jump = "616115533", climb = "616104706", fall = "616108001" }, Levitation = { idle1 = "742637893", idle2 = "742638445", walk = "742639220", run = "742638267", jump = "742637942", climb = "742636889", fall = "742637151" }, Pirate = { idle1 = "750781874", idle2 = "750782770", walk = "750785693", run = "750783738", jump = "750782230", climb = "750779899", fall = "750780242" } }
local animationNames = {} for name, _ in pairs(animations) do table.insert(animationNames, name) end
Library.addDropdown(tab3, "Animations", "Select one", animationNames, function(selected) local player = game.Players.LocalPlayer if not player.Character or not player.Character:FindFirstChild("Animate") then return end

local Animate = player.Character.Animate
local anim = animations[selected]

if anim then
    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.idle1
    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.idle2
    Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.walk
    Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.run
    Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.jump
    Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.climb
    Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. anim.fall
end
end)

getgenv().ReplicatedStorage, getgenv().StarterGui, getgenv().Players, getgenv().toggleNotifications, getgenv().notificationsSent, lastRoles = game:GetService("ReplicatedStorage"), game:GetService("StarterGui"), game:GetService("Players"), false, { Murderer = false, Sheriff = false }, {}

local localPlayer, searching = getgenv().Players.LocalPlayer, false
local function sendNotification(player, role)
    if not getgenv().toggleNotifications then return end
    local playerObj, thumb = getgenv().Players:FindFirstChild(player), ""
    if playerObj then thumb = getgenv().Players:GetUserThumbnailAsync(playerObj.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100) end
    getgenv().StarterGui:SetCore("SendNotification", { Title = "Player Detected", Text = player .. " is " .. role, Icon = thumb, Duration = 5 })
    getgenv().notificationsSent[role], lastRoles[player] = true, role
end
local function getRoles()
    if not getgenv().toggleNotifications then return end
    local success, roles = pcall(function() return getgenv().ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer() end)
    if not success or not roles then return end
    local murderFound, sheriffFound = false, false
    for player, info in pairs(roles) do
        if info.Role == "Murderer" then murderFound = true if not getgenv().notificationsSent.Murderer and lastRoles[player] ~= "Murderer" then sendNotification(player, "Murderer") end
        elseif info.Role == "Sheriff" then sheriffFound = true if not getgenv().notificationsSent.Sheriff and lastRoles[player] ~= "Sheriff" then sendNotification(player, "Sheriff") end end
    end
    if not murderFound then getgenv().notificationsSent.Murderer = false end
    if not sheriffFound then getgenv().notificationsSent.Sheriff = false end
end

local function startSearching()
    if searching then return end
    searching = true
    while getgenv().toggleNotifications do
        if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") and localPlayer.Character.Humanoid.Health > 0 then getRoles() end
        task.wait(2)
    end
    searching = false
end

localPlayer.CharacterAdded:Connect(function()
    wait(1)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
        localPlayer.Character.Humanoid.Died:Connect(function() end)
    end
end)
Library.addToggle(tab3, "Role Notification", "notificaci√≥n de roles", false, function(state)
    getgenv().toggleNotifications = state
    if state then task.spawn(startSearching) else getgenv().notificationsSent, lastRoles = { Murderer = false, Sheriff = false }, {} end
end)
Library.addLabel(tab3, "Gun Stuff")
getgenv().gesp = getgenv().savedConfig.gunESP or false
getgenv().enabled = getgenv().savedConfig.knifeESP or false

Library.addToggle(tab3, "ESP Gun Drop", "Esp Pistola caida", getgenv().gesp, function(st)
    getgenv().gesp = st
    getgenv().savedConfig.gunESP = st
    getgenv().saveConfig(getgenv().savedConfig)
    
    local function createLbl(obj)
        local plr = game:GetService("Players").LocalPlayer
        local dist = (obj.Position - plr.Character.HumanoidRootPart.Position).Magnitude
        if not obj:FindFirstChild("GunLabel") then
            local lbl = Instance.new("BillboardGui")
            lbl.Name, lbl.Adornee, lbl.Size, lbl.StudsOffset, lbl.AlwaysOnTop, lbl.Parent = "GunLabel", obj, UDim2.new(0, 200, 0, 50), Vector3.new(0, 3, 0), true, obj
            local txtLbl = Instance.new("TextLabel")
            txtLbl.Size = UDim2.new(1, 0, 1, 0)
            txtLbl.BackgroundTransparency, txtLbl.TextStrokeTransparency, txtLbl.TextSize, txtLbl.ZIndex, txtLbl.Parent = 1, 0.6, 10, 5, lbl
            txtLbl.Text = string.format("Gun Here! [%d studs]", math.floor(dist))
            txtLbl.TextColor3 = Color3.fromRGB(255, 0, 255)
        else
            local txtLbl = obj.GunLabel:FindFirstChildOfClass("TextLabel")
            if txtLbl then
                txtLbl.Text = string.format("Gun Here! [%d studs]", math.floor(dist))
            end
        end
    end
    
    local function removeHLsAndLbls()
        for _, v in pairs(workspace:GetChildren()) do
            local gd = v:FindFirstChild("GunDrop")
            if gd then
                local hl = gd:FindFirstChild("Highlight")
                if hl then
                    hl:Destroy()
                end
                local lbl = gd:FindFirstChild("GunLabel")
                if lbl then
                    lbl:Destroy()
                end
            end
        end
    end

    local runConn
    if st then
        runConn = game:GetService("RunService").Heartbeat:Connect(function()
            if getgenv().gesp then
                for _, v in pairs(workspace:GetChildren()) do
                    local gd = v:FindFirstChild("GunDrop")
                    if gd then
                        if not gd:FindFirstChild("Highlight") then
                            local hl = Instance.new("Highlight")
                            hl.Parent = gd
                            hl.FillTransparency = 0.7
                            hl.FillColor = Color3.fromRGB(148, 0, 211)
                            hl.OutlineColor = Color3.fromRGB(255, 0, 255)
                        end
                        createLbl(gd)
                    end
                end
            end
        end)
    else
        if runConn then
            runConn:Disconnect()
        end
        removeHLsAndLbls()
    end
end)

local function addHighlight(knife)
    if getgenv().enabled and not knife:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.FillColor = Color3.fromRGB(0, 200, 160)
        highlight.OutlineColor = Color3.fromRGB(0, 200, 160)
        highlight.FillTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.OutlineTransparency = 0
        highlight.Adornee = knife
        highlight.Parent = knife
    end
end

workspace.DescendantAdded:Connect(function(descendant)
    if getgenv().enabled and descendant:IsA("Model") and descendant.Name == "ThrowingKnife" then
        addHighlight(descendant)
    end
end)

Library.addToggle(tab3, "See Thrown Knife", "", getgenv().enabled, function(state)
    getgenv().enabled = state
    getgenv().savedConfig.knifeESP = state
    getgenv().saveConfig(getgenv().savedConfig)

    if not state then
        for _, knife in ipairs(workspace:GetDescendants()) do
            if knife:IsA("Model") and knife.Name == "ThrowingKnife" then
                local highlight = knife:FindFirstChild("Highlight")
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end
end)
Library.addLabel(tab3, "Traps")
getgenv().removeTrap = getgenv().savedConfig.removeTrap or false
getgenv().seeTraps = getgenv().savedConfig.seeTraps or false

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local function handleTrap(child)
    if child:IsA("Model") and child.Name == "Trap" then
        if getgenv().removeTrap then
            child:Destroy()
        elseif getgenv().seeTraps then
            if not child:FindFirstChild("TrapLabel") then
                local billboard = Instance.new("BillboardGui", child)
                billboard.Name = "TrapLabel"
                billboard.Size = UDim2.new(0, 100, 0, 50)
                billboard.Adornee = child:FindFirstChild("PrimaryPart") or child
                billboard.AlwaysOnTop = true
                local text = Instance.new("TextLabel", billboard)
                text.Size = UDim2.new(1, 0, 1, 0)
                text.Text = "Trap"
                text.BackgroundTransparency = 1
                text.TextColor3 = Color3.fromRGB(138, 43, 226)
                text.TextStrokeTransparency = 0
            end
        end
    end
end

local function onCharacterAdded(character)
    character.DescendantAdded:Connect(handleTrap)
    
    for _, child in ipairs(character:GetChildren()) do
        handleTrap(child)
    end
end

local function setupPlayer(player)
    if player ~= localPlayer then
        player.CharacterAdded:Connect(onCharacterAdded)
        if player.Character then
            onCharacterAdded(player.Character)
        end
    end
end

Players.PlayerAdded:Connect(setupPlayer)

for _, player in pairs(Players:GetPlayers()) do
    setupPlayer(player)
end

local function updateAllTraps()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            for _, child in ipairs(player.Character:GetChildren()) do
                handleTrap(child)
            end
        end
    end
end

Library.addToggle(tab3, "Remove Traps", "destruir trampas", getgenv().removeTrap, function(state)
    getgenv().removeTrap = state
    getgenv().savedConfig.removeTrap = state
    getgenv().saveConfig(getgenv().savedConfig)
    updateAllTraps()
end)

Library.addToggle(tab3, "See Traps", "Ver trampas", getgenv().seeTraps, function(state)
    getgenv().seeTraps = state
    getgenv().savedConfig.seeTraps = state
    getgenv().saveConfig(getgenv().savedConfig)
    updateAllTraps()
    if not state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= localPlayer and player.Character then
                for _, child in ipairs(player.Character:GetChildren()) do
                    if child:IsA("Model") and child.Name == "Trap" then
                        if child:FindFirstChild("TrapLabel") then
                            child.TrapLabel:Destroy()
                        end
                    end
                end
            end
        end
    end
end)

Library.addButton(tab3, "Place Trap (touch)", "", function()
if game.Players.LocalPlayer.Character ~= nil then
    local mouse = game.Players.LocalPlayer:GetMouse()
    tool = Instance.new("Tool")
    tool.RequiresHandle = false
    tool.Name = "Place Traps"
    tool.Activated:connect(function()
        local pos = mouse.Hit
        local args = {
            [1] = CFrame.new(pos.Position.X, pos.Position.Y, pos.Position.Z, 
                             0.7621428370475769, -6.621179160504198e-09, 0.6474089026451111, 
                             2.9349132013578583e-09, 1, 6.772159277801393e-09, 
                             -0.6474089026451111, -3.261263925580238e-09, 0.7621428370475769)
        }
        game:GetService("Players").LocalPlayer.Character.Trap.Activate:FireServer(unpack(args))
    end)
    tool.Parent = game.Players.LocalPlayer.Backpack
end
end)
Library.addButton(tab3, "Place Trap To the GunDrop pos", "", function()
local gunDrop = nil
for _, v in pairs(workspace:GetChildren()) do
    local temp = v:FindFirstChild("GunDrop")
    if temp then
        gunDrop = temp
        break
    end
end
if not gunDrop then return end

local args = {
    [1] = CFrame.new(gunDrop.Position.X, gunDrop.Position.Y, gunDrop.Position.Z, 
                     0.7621428370475769, -6.621179160504198e-09, 0.6474089026451111, 
                     2.9349132013578583e-09, 1, 6.772159277801393e-09, 
                     -0.6474089026451111, -3.261263925580238e-09, 0.7621428370475769)
}
game:GetService("Players").LocalPlayer.Character.Trap.Activate:FireServer(unpack(args))
end)
Library.addLabel(tab3, "round time")
local state, timerThread = getgenv().savedConfig.showTimerGame or false, nil

local function createGui()
    if CoreGui:FindFirstChild("TimerGui") then CoreGui.TimerGui:Destroy() end
    local gui, text = Instance.new("ScreenGui"), Instance.new("TextLabel")
    gui.Name, gui.Parent, text.Parent = "TimerGui", CoreGui, gui
    text.Name, text.BackgroundTransparency, text.TextColor3 = "TimerText", 1, Color3.new(1, 1, 1)
    text.TextStrokeColor3, text.TextStrokeTransparency, text.TextScaled = Color3.new(), 0.5, true
    text.AnchorPoint, text.Position, text.Size, text.Font = Vector2.new(0.5, 0.5), UDim2.new(0.5, 0, 0.1, 0), UDim2.new(0, 200, 0, 50), Enum.Font.GothamBold
    text.Text = "0:00"
    return text
end

local function updateTimer(text)
    while state do
        local success, timeLeft = pcall(function() return ReplicatedStorage.Remotes.Extras.GetTimer:InvokeServer() end)
        if not success or timeLeft <= 0 then 
            text.Text = "0:00"
            for _ = 1, 3 do
                if not state then return end
                text.TextColor3 = Color3.new(1, 0, 0)
                task.wait(0.5)
                if not state then return end
                text.TextColor3 = Color3.new(1, 1, 1)
                task.wait(0.5)
            end
            repeat task.wait(1) until not state or ReplicatedStorage.Remotes.Extras.GetTimer:InvokeServer() > 0
        else 
            text.Text = string.format("%d:%02d", timeLeft // 60, timeLeft % 60)
            text.TextColor3 = timeLeft <= 10 and Color3.new(1, 0, 0) or Color3.new(1, 1, 1)
        end
        task.wait(0.9)
    end
end

Library.addToggle(tab3, "Show Timer Game", "Ver tiempo de la ronda", state, function(toggleState)
    state = toggleState
    getgenv().savedConfig.showTimerGame = toggleState
    getgenv().saveConfig(getgenv().savedConfig)

    if state then 
        timerThread = task.spawn(function() updateTimer(createGui()) end)
    else
        state, timerThread = false, nil
        if CoreGui:FindFirstChild("TimerGui") then CoreGui.TimerGui:Destroy() end
    end
end)

Library.addLabel(tab3, "snitch role")

Library.addButton(tab3, "snitch who is the sheriff or murderer", "decir en el chat quien es murderer o sheriff", function()
local RS = game:GetService("ReplicatedStorage")
local TCS = game:GetService("TextChatService")
local data = RS:FindFirstChild("GetPlayerData", true):InvokeServer()
if not data then return end
local sheriff, murderer
for name, role in pairs(data) do
    if role.Role == "Murderer" then
        murderer = name
    elseif role.Role == "Sheriff" then
        sheriff = name
    end
end
if sheriff and murderer then
    TCS.TextChannels.RBXGeneral:SendAsync(sheriff .. " is the Sheriff and " .. murderer .. " is the Murderer.")
elseif murderer then
    TCS.TextChannels.RBXGeneral:SendAsync(murderer .. " is the Murderer.")
end
end)

Library.addButton(tab3, "Reset Cam", "resetear la c√°mara", function()
local player = game:GetService("Players").LocalPlayer
local character = player.Character
if not character then return end
local humanoid = character:FindFirstChildWhichIsA('Humanoid')
if not humanoid then return end
local camera = workspace.CurrentCamera
camera.CameraType = Enum.CameraType.Custom
camera.CameraSubject = humanoid
player.CameraMinZoomDistance = 0.5
player.CameraMaxZoomDistance = 400
player.CameraMode = Enum.CameraMode.Classic
local head = character:FindFirstChild("Head")
if head then
    head.Anchored = false
end
end)

Library.addDropdown(tab3, "Fake Die", "Select an option", {"Lay On Back", "Sit Down"}, function(fakedie)
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if not humanoid then
        return
    end

    if fakedie == "Lay On Back" then
        humanoid.Sit = true
        task.wait(0.1)
        local root = character:FindFirstChild("HumanoidRootPart")
        if root then
            root.CFrame = root.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
        end
        for _, anim in ipairs(humanoid:GetPlayingAnimationTracks()) do
            anim:Stop()
        end
    elseif fakedie == "Sit Down" then
        humanoid.Sit = true
    end
end)

local function GetPlayerByRole(role)
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    for i, v in pairs(roles) do
        if v.Role == role then
            return Players:FindFirstChild(i)
        end
    end
    return nil
end

local function TeleportToRole(role)
    local rolePlayer = GetPlayerByRole(role)
    if rolePlayer and rolePlayer.Character and rolePlayer.Character:FindFirstChild("HumanoidRootPart") then
        local Character = Players.LocalPlayer.Character
        if Character then
            Character:SetPrimaryPartCFrame(rolePlayer.Character.HumanoidRootPart.CFrame)
        end
    end
end

local function ViewRole(role)
    local rolePlayer = GetPlayerByRole(role)
    if rolePlayer and rolePlayer.Character and rolePlayer.Character:FindFirstChild("HumanoidRootPart") then
        Camera.CameraSubject = rolePlayer.Character.Humanoid
        Camera.CFrame = rolePlayer.Character.HumanoidRootPart.CFrame
    end
end

Library.addLabel(tab3, "View Roles")

Library.addDropdown(tab3, "View Role", "See role", {"Murderer", "Sheriff", "Hero"}, function(selectedRole)
    ViewRole(selectedRole)
end)
Library.addButton(tab3, "Return to my camera", "regresar a mi c√°mara", function()
    local LP = Players.LocalPlayer
    if LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
        Camera.CameraSubject = LP.Character.Humanoid
        Camera.CFrame = LP.Character.HumanoidRootPart.CFrame
    end
end)

Library.addButton(tab4, "FAKE Fake bomb trick", "", function()
local player = game:GetService("Players").LocalPlayer
local coreGui, replicatedStorage = game:GetService("CoreGui"), game:GetService("ReplicatedStorage")
local gui = coreGui:FindFirstChild("bomb")
if gui then gui:Destroy() end
gui = Instance.new("ScreenGui", coreGui)
gui.Name = "bomb"
local btn = Instance.new("TextButton", gui)
btn.Size, btn.Position = UDim2.new(0, 100, 0, 100), UDim2.new(1, -110, 0, 10)
btn.Text, btn.Font, btn.TextSize, btn.TextColor3 = "Fake bomb trick", Enum.Font.Gotham, 14, Color3.new(1, 1, 1)
btn.BackgroundColor3, btn.BackgroundTransparency, btn.Draggable = Color3.new(0, 1, 0), 0.6, true
Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 15)
local canUse, cooldown = true, 22
local function reset()
    canUse, btn.BackgroundColor3, btn.Text = true, Color3.new(0, 1, 0), "Fake bomb trick"
end
local function useBomb()
    if not canUse then return end
    canUse, btn.BackgroundColor3 = false, Color3.new(1, 0, 0)
    local backpack, char = player:FindFirstChild("Backpack"), player.Character or player.CharacterAdded:Wait()
    local bomb = backpack:FindFirstChild("FakeBomb") or char:FindFirstChild("FakeBomb")
    if not bomb then
        replicatedStorage.Remotes.Extras.ReplicateToy:InvokeServer("FakeBomb")
        bomb = backpack:WaitForChild("FakeBomb") or char:WaitForChild("FakeBomb")
    end
    bomb.Parent = char
    if bomb:IsDescendantOf(char) then
        char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 53
        bomb.Remote:FireServer(char.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0), 50)
        task.wait(0.3)
        bomb.Parent = backpack
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 51
    end
    local start, currentChar = time(), player.Character
    while time() - start < cooldown do
        if player.Character ~= currentChar then reset() return end
        btn.Text = string.format("Cooldown: %ds", cooldown - math.floor(time() - start))
        task.wait(0.1)
    end
    reset()
end

btn.MouseButton1Click:Connect(useBomb)
player.CharacterAdded:Connect(reset)
reset()
end)

Library.addButton(tab4, "Wallhop", "", function()
getgenv().w = false getgenv().c = true getgenv().d = 5
local g = game:GetService("CoreGui"):FindFirstChild("wN") if g then return end
local s = Instance.new("ScreenGui") s.Name = "wN" s.Parent = game:GetService("CoreGui")
local b = Instance.new("TextButton") local u = Instance.new("UICorner") local a = Instance.new("Sound")
b.Name = "B" b.Size = UDim2.new(0, 50, 0, 50) b.Position = UDim2.new(0.5, -50, 0.5, -25) b.Text = "OFF" b.Font = Enum.Font.Gotham b.TextSize = 12 b.TextColor3 = Color3.fromRGB(255, 255, 255) b.BackgroundColor3 = Color3.fromRGB(0, 120, 0) b.BackgroundTransparency = 0.6 b.Draggable = true b.BorderSizePixel = 0 b.Parent = s
u.CornerRadius = UDim.new(0, 10) u.Parent = b
a.SoundId = "rbxassetid://1673280232" a.Parent = b
local function t() getgenv().w = not getgenv().w if getgenv().w then b.Text = "ON" b.BackgroundColor3 = Color3.fromRGB(0, 120, 0) else b.Text = "OFF" b.BackgroundColor3 = Color3.fromRGB(150, 0, 0) end
a:Play()
b:TweenSize(UDim2.new(0, 70, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
task.wait(0.2)
b:TweenSize(UDim2.new(0, 50, 0, 50), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
end
b.MouseButton1Click:Connect(t)
local p = game.Players.LocalPlayer local ps = game:GetService("Players") local i = game:GetService("UserInputService")
local function l() local x = {} for _, v in pairs(ps:GetPlayers()) do if v.Character then table.insert(x, v.Character) end end return x end
local function y(o, r) if not o then return false end local n = RaycastParams.new() n.FilterType = Enum.RaycastFilterType.Blacklist n.FilterDescendantsInstances = l() n.IgnoreWater = true local m = workspace:Raycast(o.Position, r * getgenv().d, n) return m and m.Instance ~= nil end
local function v(h) local j = h:FindFirstChildOfClass("Humanoid") local k = h:FindFirstChild("HumanoidRootPart") local e = h:FindFirstChild("Head") if not j or not k or not e then return end
i.JumpRequest:Connect(function()
    if not getgenv().w or not getgenv().c then return end getgenv().c = false  
    local f, r, l, q = k.CFrame.LookVector, k.CFrame.RightVector, -k.CFrame.RightVector, 0  
    local wf, wr, wl = y(k, f) or y(e, f), y(k, r) or y(e, r), y(k, l) or y(e, l)  
    q = (wf and wl or wl) and 60 or (wf and wr or wr) and -60 or 0  
    if q ~= 0 then k.CFrame = k.CFrame * CFrame.Angles(0, math.rad(q), 0) j:ChangeState(Enum.HumanoidStateType.Jumping) end  
    task.wait(0.2) getgenv().c = true  
end)
end
local function w(h) task.wait(0.5) v(h) end
if p.Character then v(p.Character) end
p.CharacterAdded:Connect(w)
end)

Library.addLabel(tab4, "Gun stuff")

Library.addDropdown(tab4, "GunDrop tp/tween", "Choose an action", {"Teleport to GunDrop", "Tween to GunDrop"}, function(selected)
    local success, err = pcall(function()
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character
        if not character then return end
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local gunDrop = nil
        for _, v in pairs(workspace:GetChildren()) do
            local temp = v:FindFirstChild("GunDrop")
            if temp then
                gunDrop = temp
                break
            end
        end
        if not gunDrop then return end

        local originalCFrame = hrp.CFrame

        if selected == "Teleport to GunDrop" then
            hrp.CFrame = gunDrop.CFrame
            task.wait(0.001)
            hrp.CFrame = originalCFrame

        elseif selected == "Tween to GunDrop" then
            local TweenService = game:GetService("TweenService")
            local distance = (gunDrop.Position - hrp.Position).Magnitude
            if distance < 10 then
                hrp.CFrame = gunDrop.CFrame
                task.wait(0.001)
                hrp.CFrame = originalCFrame
            else
                local direction = (gunDrop.Position - hrp.Position).Unit
                local targetPosition = gunDrop.Position - direction * 10
                local targetCFrame = CFrame.new(targetPosition, gunDrop.Position)
                local tweenInfo = TweenInfo.new((targetPosition - hrp.Position).Magnitude / 50, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
                tween:Play()
                tween.Completed:Connect(function()
                    hrp.CFrame = gunDrop.CFrame
                    task.wait(0.001)
                    hrp.CFrame = originalCFrame
                end)
            end
        end
    end)
    
    if not success then
        warn("Error en la ejecuci√≥n: " .. tostring(err))
    end
end)

getgenv().player, getgenv().coreGui, getgenv().autoGrabThread, getgenv().auraThread, getgenv().viewThread = game.Players.LocalPlayer, game:GetService("CoreGui")

Library.addToggle(tab4, "Bring Gun/(button)", "", getgenv().savedConfig.bringGun or false, function(state)
    getgenv().savedConfig.bringGun = state
    getgenv().saveConfig(getgenv().savedConfig)

    local existingGui = coreGui:FindFirstChild("TPGUN")
    if existingGui then existingGui:Destroy() end
    if state then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "TPGUN"
        screenGui.Parent = coreGui

        local button = Instance.new("TextButton")
        button.Name = "TPGUNButton"
        button.Text = "Bring Gun"
        button.Size = UDim2.new(0, 60, 0, 50)
        button.Position = UDim2.new(1, -220, 0, 10)
        button.BackgroundTransparency = 0.5
        button.BackgroundColor3 = Color3.fromRGB(138, 43, 250)
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Draggable = true
        Instance.new("UICorner", button).CornerRadius = UDim.new(0, 5)
        button.Parent = screenGui

        button.MouseButton1Click:Connect(function()
            local character = player.Character
            if not character then return end
            local gunDrop = workspace:FindFirstChild("GunDrop", true)
            local root = character:FindFirstChild("HumanoidRootPart")
            if gunDrop and root then
                firetouchinterest(root, gunDrop, 0)
                firetouchinterest(root, gunDrop, 1)
            end
        end)
    end
end)

Library.addToggle(tab4, "Auto grab Gun", "Auto recoger pistola caida", getgenv().savedConfig.autoGrabGun or false, function(state)
    getgenv().savedConfig.autoGrabGun = state
    getgenv().saveConfig(getgenv().savedConfig)

    if autoGrabThread then
        task.cancel(autoGrabThread)
        autoGrabThread = nil
    end
    if state then
        autoGrabThread = task.spawn(function()
            local function hasKnife()
                local character = player.Character
                return character and (player.Backpack:FindFirstChild("Knife") or character:FindFirstChild("Knife"))
            end

            while state do
                if not hasKnife() then
                    local gunDrop = workspace:FindFirstChild("GunDrop", true)
                    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

                    if gunDrop and root then
                        firetouchinterest(root, gunDrop, 0)
                        firetouchinterest(root, gunDrop, 1)
                    end
                end
                task.wait(0.3)
            end
        end)
    end
end)

Library.addToggle(tab4, "Gun Aura", "Pistola aura", getgenv().savedConfig.gunAura or false, function(state)
    getgenv().savedConfig.gunAura = state
    getgenv().saveConfig(getgenv().savedConfig)

    if auraThread then
        task.cancel(auraThread)
        auraThread = nil
    end

    if state then
        auraThread = task.spawn(function()
            while state do
                local character = player.Character
                local root = character and character:FindFirstChild("HumanoidRootPart")
                local gunDrop = workspace:FindFirstChild("GunDrop", true)

                if root and gunDrop then
                    local distance = (root.Position - gunDrop.Position).Magnitude
                    if distance <= 10 then
                        firetouchinterest(root, gunDrop, 0)
                        firetouchinterest(root, gunDrop, 1)
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end)

Library.addToggle(tab4, "View Drop Gun", "Ver Pistola caida", getgenv().savedConfig.viewDropGun or false, function(state)
    getgenv().savedConfig.viewDropGun = state
    getgenv().saveConfig(getgenv().savedConfig)

    if viewThread then
        task.cancel(viewThread)
        viewThread = nil
        workspace.CurrentCamera.CameraSubject = player.Character and player.Character:FindFirstChild("Humanoid") or player
    end

    if state then
        viewThread = task.spawn(function()
            while state do
                local gunDrop = workspace:FindFirstChild("GunDrop", true)
                if gunDrop then
                    workspace.CurrentCamera.CameraSubject = gunDrop
                end
                task.wait(0.1)
            end
        end)
    end
end)

Library.addButton(tab4, "it Make you invisible", "Te hace invisible", function()
    loadstring(game:HttpGet('https://pastebin.com/raw/GgYsFfDK'))()
end)

getgenv().p = game.Players.LocalPlayer

local gui = Instance.new("ScreenGui")
gui.Name = "TeleportGui"
gui.ResetOnSpawn = false
gui.Parent = p:WaitForChild("PlayerGui")

local btn = Instance.new("TextButton")
btn.Name = "TeleportButton"
btn.Size = UDim2.new(0, 50, 0, 50)
btn.Position = UDim2.new(0.5, -25, 0.1, 0)
btn.Text = "Teleport to Last Death"
btn.Font = Enum.Font.Gotham
btn.TextSize = 10
btn.TextColor3 = Color3.new(1, 1, 1)
btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
btn.BackgroundTransparency = 0.6
btn.Draggable = true
btn.Parent = gui
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 15)
corner.Parent = btn

getgenv().lastPos = getgenv().savedConfig.lastPos or nil
getgenv().toggleOn = getgenv().savedConfig.tpAtLastDeath or false

local function recordPos()
    if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        getgenv().lastPos = p.Character.HumanoidRootPart.CFrame
        getgenv().savedConfig.lastPos = getgenv().lastPos
        getgenv().saveConfig(getgenv().savedConfig)
    end
end

local function onDeath()
    recordPos()
end

local function onAdd(c)
    local hum = c:WaitForChild("Humanoid", 3)
    if hum then
        hum.Died:Connect(onDeath)
    end
end

p.CharacterAdded:Connect(onAdd)
if p.Character then
    onAdd(p.Character)
end

Library.addToggle(tab4, "tp at the Last Death", "teletransportarse a la √∫ltima posici√≥n de la muerte", getgenv().toggleOn, function(state)
    getgenv().toggleOn = state
    getgenv().savedConfig.tpAtLastDeath = state
    getgenv().saveConfig(getgenv().savedConfig)
    btn.Visible = state
end)

btn.MouseButton1Click:Connect(function()
    if not getgenv().toggleOn then return end
    if not getgenv().lastPos then
        btn.Text = "No death position!"
        task.wait(2)
        btn.Text = "Teleport to Last Death"
        return
    end
    if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        p.Character.HumanoidRootPart.CFrame = getgenv().lastPos
    else
        btn.Text = "No character found!"
        task.wait(2)
        btn.Text = "Teleport to Last Death"
    end
end)

Library.addLabel(tab4, "Teleport To A Specific Location")

Library.addDropdown(tab4, "Go to", "Lobby", {"Lobby", "Vote Map", "Go to Map", "Void (Safe)"}, function(selectedOption)
    if selectedOption == "Lobby" then
        local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local spawns = workspace.Lobby.Spawns:GetChildren()

        if hrp and #spawns > 0 then
            hrp.CFrame = spawns[math.random(#spawns)].CFrame + Vector3.new(0, 3, 0)
        end
    elseif selectedOption == "Vote Map" then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-109, 141, 88)
    elseif selectedOption == "Go to Map" then
        for _, v in ipairs(workspace:GetDescendants()) do
            if v.Name == "Spawn" or v.Name == "PlayerSpawn" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0, 2.5, 0)
            end
        end
    elseif selectedOption == "Void (Safe)" then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        local teleportPosition = CFrame.new(-74, 6, 693)
        hrp.CFrame = teleportPosition * CFrame.new(0, 3, 0)
    end
end)

Library.addLabel(tab4, "teleport a role player")

Library.addDropdown(tab4, "Teleport to", "role", {"Sheriff", "Murderer", "Hero"}, function(selectedRole)
    TeleportToRole(selectedRole)
end)

local lp = game.Players.LocalPlayer

local function getClosestPlayer()
    local closest, distance = nil, math.huge
    local lpRoot = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if not lpRoot then return nil end

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= lp and player.Character then
            local root = player.Character:FindFirstChild("HumanoidRootPart")
            if root then
                local d = (lpRoot.Position - root.Position).Magnitude
                if d < distance then closest, distance = player, d end
            end
        end
    end
    return closest
end

local function getRandomPlayer()
    local players = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= lp then table.insert(players, player) end
    end
    return #players > 0 and players[math.random(1, #players)] or nil
end

local function teleportTo(option)
    local target = option == "Random Player" and getRandomPlayer() or getClosestPlayer()
    if target and target.Character then
        local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
        local lpRoot = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        if targetRoot and lpRoot then lpRoot.CFrame = targetRoot.CFrame end
    end
end

Library.addDropdown(tab4, "Teleport to", "players", {"Random Player", "Closest Player"}, function(option) teleportTo(option) end)
Library.addLabel(tab4, "Teleport")
Library.addLabel(tab10, "Optimization (maybe more lag than normal)")

getgenv().antiLag = false
getgenv().removeRaggy = false
getgenv().destroyCoins = false
getgenv().removeBarrier = false
getgenv().targetModels = {"Raggy", "GlitchProof"}

local opt = {
    coinConnections = {},
    coinContainerConnection = nil
}

function opt.destroyTargetModels()
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and table.find(getgenv().targetModels, obj.Name) then
            obj:Destroy()
        end
    end
end

function opt.getCoinContainer()
    return Workspace:FindFirstChild("CoinContainer", true)
end

function opt.attachCoinListener(coin)
    if opt.coinConnections[coin] then return end
    local conn = coin.Touched:Connect(function(hit)
        if not getgenv().destroyCoins then return end
        local character = hit.Parent
        if character and Players:GetPlayerFromCharacter(character) then
            if conn.Connected then conn:Disconnect() end
            opt.coinConnections[coin] = nil
            task.wait(0.1)
            if coin and coin.Parent then coin:Destroy() end
        end
    end)
    opt.coinConnections[coin] = conn
end

function opt.detachAllCoinListeners()
    for coin, conn in pairs(opt.coinConnections) do
        if conn.Connected then conn:Disconnect() end
    end
    opt.coinConnections = {}
    if opt.coinContainerConnection then
        opt.coinContainerConnection:Disconnect()
        opt.coinContainerConnection = nil
    end
end

function opt.monitorCoins()
    local container = opt.getCoinContainer()
    if container then
        for _, coin in ipairs(container:GetChildren()) do
            if coin.Name == "Coin_Server" and coin:IsA("BasePart") then
                opt.attachCoinListener(coin)
            end
        end
        opt.coinContainerConnection = container.ChildAdded:Connect(function(child)
            if child.Name == "Coin_Server" and child:IsA("BasePart") then
                opt.attachCoinListener(child)
            end
        end)
    end
end

function opt.clearLag()
    for _, folder in ipairs(Workspace:GetChildren()) do
        if folder:IsA("Folder") and table.find({"Footsteps", "WeaponDisplays"}, folder.Name) then
            folder:Destroy()
        end
    end
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            for _, item in ipairs({"KnifeDisplay", "GunDisplay", "Pet"}) do
                local targetItem = character:FindFirstChild(item)
                if targetItem then targetItem:Destroy() end
            end
            for _, tool in ipairs(character:GetChildren()) do
                if tool:IsA("Tool") then
                    local chroma = tool:FindFirstChild("Handle") and tool.Handle:FindFirstChild("Chroma")
                    if chroma then chroma:Destroy() end
                end
            end
        end
    end
    for _, child in ipairs(Workspace:GetChildren()) do
        if child:IsA("Model") or child:IsA("Part") then
            local chroma = child:FindFirstChild("Handle") and child.Handle:FindFirstChild("Chroma")
            if chroma then chroma:Destroy() end
        end
    end
end

function opt.monitorAntiLag()
    while true do
        if getgenv().antiLag then opt.clearLag() end
        task.wait(1)
    end
end

task.spawn(opt.monitorAntiLag)

Workspace.ChildAdded:Connect(function(child)
    if getgenv().antiLag then
        if child:IsA("Folder") and table.find({"Footsteps", "WeaponDisplays"}, child.Name) then
            child:Destroy()
        elseif child:IsA("Model") or child:IsA("Part") then
            local chroma = child:FindFirstChild("Handle") and child.Handle:FindFirstChild("Chroma")
            if chroma then chroma:Destroy() end
        end
    end
    if getgenv().removeBarrier and child:IsA("Model") and child.Name == "GlitchProof" then
        child:Destroy()
    end
end)

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.CharacterAdded:Connect(function(character)
        if getgenv().antiLag then opt.clearLag() end
    end)
end)

Library.addToggle(tab10, "optimization", "optimizaci√≥n", false, function(state)
    getgenv().antiLag = state
end)

Library.addToggle(tab10, "Destroy dead body", "destruir cad√°veres", false, function(state)
    getgenv().removeRaggy = state
    if state then opt.destroyTargetModels() end
end)

Library.addToggle(tab10, "Destroy coins", "destruir monedas", false, function(state)
    getgenv().destroyCoins = state
    if state then
        opt.monitorCoins()
    else
        opt.detachAllCoinListeners()
    end
end)

Library.addToggle(tab10, "Remove Barrier", "remover barrera", false, function(state)
    getgenv().removeBarrier = state
    if state then opt.destroyTargetModels() end
end)

Library.addToggle(tab10, "Remove shadow", "remover sombras", false, function(state)
    game.Lighting.GlobalShadows = not state
end)

Library.addToggle(tab10, "Remove players Accessory", "remover jugadores Accesorio", false, function(state)
    if state then
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game:GetService("Players").LocalPlayer then
                if player.Character then
                    for _, accessory in pairs(player.Character:GetChildren()) do
                        if accessory:IsA("Accessory") then
                            accessory:Destroy()
                        end
                    end
                end
            end
        end
    end
end)

local lighting = game:GetService("Lighting")
local affectedObjects = {}

Library.addToggle(tab10, "Less lag optimization", "menos lag", false, function(state)
    if state then
        lighting.GlobalShadows = false
        lighting.FogEnd = 9e9
        
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                affectedObjects[v] = v.Enabled
                v.Enabled = false
            end
        end
    else
        lighting.GlobalShadows = true
        lighting.FogEnd = 100000
        
        for obj, wasEnabled in pairs(affectedObjects) do
            if obj and obj.Parent then
                obj.Enabled = wasEnabled
            end
        end
        
        affectedObjects = {}
    end
end)

Library.addButton(tab10, "Fps Booster (maybe more lag than normal)", "fps refuerzo (talvez de m√°s lag de lo normal)", function()
loadstring(game:HttpGet("https://pastebin.com/raw/xW41aVkt"))()
end)

Library.addButton(tab10, "lower cpu load", "", function()
local ToDisable = {
	Textures = false,
	VisualEffects = true,
	Parts = true,
	Particles = true,
	Sky = true
}
local ToEnable = {
	FullBright = true
}
local Stuff = {}
for _, v in next, game:GetDescendants() do
	if ToDisable.Parts then
		if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
			v.Material = Enum.Material.SmoothPlastic
			table.insert(Stuff, v)
		end
	end
	
	if ToDisable.Particles then
		if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
			v.Enabled = false
			table.insert(Stuff, v)
		end
	end
	
	if ToDisable.VisualEffects then
		if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
			v.Enabled = false
			table.insert(Stuff, v)
		end
	end
	
	if ToDisable.Textures then
		if v:IsA("Decal") or v:IsA("Texture") then
			v.Texture = ""
			table.insert(Stuff, v)
		end
	end
	
	if ToDisable.Sky then
		if v:IsA("Sky") then
			v.Parent = nil
			table.insert(Stuff, v)
		end
	end
end
if ToEnable.FullBright then
	game.Lighting.Brightness = 2
	game.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
end
end)

getgenv().D3RenderingDisabled = getgenv().savedConfig.renderizado or false

Library.addToggle(tab5, "Disable 3D rendering", "Desabilitar 3d renderizando", getgenv().savedConfig.renderizado or false, function(state)
    getgenv().savedConfig.renderizado = state
    getgenv().saveConfig(getgenv().savedConfig)

    if not getgenv().D3RenderingDisabled and state then
        getgenv().D3RenderingDisabled = true
        RunService:Set3dRenderingEnabled(false)
    elseif getgenv().D3RenderingDisabled and not state then
        getgenv().D3RenderingDisabled = false
        RunService:Set3dRenderingEnabled(true)
    end
end)

Library.addLabel(tab5, "ia tween autofarm")

local PathfindingService = game:GetService("PathfindingService")
local TweenService = game:GetService("TweenService")
local detectionRadius = 80
local speed = 20

getgenv().IA_Autofarm = getgenv().savedConfig.IA_Autofarm or false
speed = tonumber(getgenv().savedConfig.TweenSpeed) or 20

Library.addToggle(tab5, "IA autofarm", "", getgenv().IA_Autofarm, function(value)
    getgenv().IA_Autofarm = value
    getgenv().savedConfig.IA_Autofarm = value
    getgenv().saveConfig(getgenv().savedConfig)
end)

Library.addTextbox(tab5, "Tween Speed", "", tostring(speed), function(inputText)
    speed = tonumber(inputText) or 20
    getgenv().savedConfig.TweenSpeed = speed
    getgenv().saveConfig(getgenv().savedConfig)
end)

local function getClosestCoin(character)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local closestCoin = nil
    local shortestDistance = detectionRadius
    for _, child in pairs(workspace:GetChildren()) do
        local coinContainer = child:FindFirstChild("CoinContainer")
        if coinContainer then
            for _, coin in pairs(coinContainer:GetChildren()) do
                if coin:IsA("BasePart") then
                    local distance = (hrp.Position - coin.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestCoin = coin
                    end
                end
            end
        end
    end
    return closestCoin
end

local function moveToCoin(character)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    while getgenv().IA_Autofarm do
        local coin = getClosestCoin(character)
        if not coin then break end
        local path = PathfindingService:CreatePath()
        path:ComputeAsync(hrp.Position, coin.Position)
        local waypoints = path:GetWaypoints()
        for _, waypoint in ipairs(waypoints) do
            if not getgenv().IA_Autofarm then break end
            local newCoin = getClosestCoin(character)
            if newCoin and newCoin ~= coin then
                coin = newCoin
                break
            end
            local distance = (hrp.Position - waypoint.Position).Magnitude
            local duration = distance / speed
            local tween = TweenService:Create(hrp, TweenInfo.new(duration, Enum.EasingStyle.Linear), {CFrame = CFrame.new(waypoint.Position)})
            tween:Play()
            tween.Completed:Wait()
        end
        local finalDistance = (hrp.Position - coin.Position).Magnitude
        if finalDistance > 2 then
            local duration = finalDistance / speed
            local tween = TweenService:Create(hrp, TweenInfo.new(duration, Enum.EasingStyle.Linear), {CFrame = CFrame.new(coin.Position)})
            tween:Play()
            tween.Completed:Wait()
        end
        if coin and coin.Parent then
            local dist = (hrp.Position - coin.Position).Magnitude
            if dist <= 2 then
                coin:Destroy()
            end
        end
        task.wait(0.05)
    end
end

spawn(function()
    while task.wait(0.1) do
        if getgenv().IA_Autofarm then
            local character = LocalPlayer.Character
            if character and character.Parent then
                moveToCoin(character)
            end
        end
    end
end)

Library.addToggle(tab5, "Reset when bag is full", "Morir cuando la bolsa est√° llena", savedConfig.resetwhen or false, function(state)  
    savedConfig.resetwhen = state  
    saveConfig(savedConfig)  

    if state then
        task.spawn(function()
            while savedConfig.resetwhen do
                local success, mainGui = pcall(function() return player.PlayerGui.MainGUI end)
                if success then
                    local lobby = mainGui:FindFirstChild("Lobby")
                    if lobby then
                        local dock = lobby:FindFirstChild("Dock")
                        if dock then
                            local coinBags = dock:FindFirstChild("CoinBags")
                            if coinBags then
                                local container = coinBags:FindFirstChild("Container")
                                if container then
                                    local coin = container:FindFirstChild("Coin")
                                    if coin then
                                        local fullCoin = coin:FindFirstChild("Full")
                                        if fullCoin and fullCoin.Visible then
                                            local character = player.Character
                                            if character then
                                                local humanoid = character:FindFirstChildOfClass("Humanoid")
                                                if humanoid then
                                                    humanoid.Health = 0
                                                    repeat task.wait() until not fullCoin.Visible
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end)

getgenv().magnetcoin = getgenv().savedConfig.magnetcoin or false
local connection

Library.addToggle(tab5, "magnet coin", "Monedas im√°n", getgenv().magnetcoin, function(state)
    getgenv().magnetcoin = state
    getgenv().savedConfig.magnetcoin = state
    getgenv().saveConfig(getgenv().savedConfig)

    local sizeMultiplier = 4.5

    local function changeCoinSize(coin, size)
        if coin:IsA("BasePart") and coin.Name == "Coin_Server" then
            coin.Size = size
        end
    end

    local function updateCoins(size)
        for _, model in ipairs(workspace:GetChildren()) do
            local coinContainer = model:FindFirstChild("CoinContainer")
            if coinContainer then
                for _, coin in ipairs(coinContainer:GetChildren()) do
                    changeCoinSize(coin, size)
                end
            end
        end
    end

    if state then
        updateCoins(Vector3.new(sizeMultiplier, sizeMultiplier, sizeMultiplier))
        connection = game.Workspace.DescendantAdded:Connect(function(coin)
            changeCoinSize(coin, Vector3.new(sizeMultiplier, sizeMultiplier, sizeMultiplier))
        end)
    else
        updateCoins(Vector3.new(1, 1, 1))
        if connection then
            connection:Disconnect()
        end
    end
end)

getgenv().autoxp = getgenv().savedConfig.autoxp or false

Library.addToggle(tab5, "Auto XP", "", getgenv().autoxp, function(state)
    getgenv().autoxp = state
    getgenv().savedConfig.autoxp = state
    getgenv().saveConfig(getgenv().savedConfig)
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().autoxp then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-108, 138, 9)
    end
end)

Library.addButton(tab6, "Anchor character", "Anclar el personaje", function()
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    
    isAnchored = not isAnchored
    for _, part in ipairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            part.Anchored = isAnchored
        end
    end
end)

local lp, rs, plrs = game:GetService("Players").LocalPlayer, game:GetService("RunService"), game:GetService("Players")
getgenv().antifling = getgenv().savedConfig.antifling or false

rs.RenderStepped:Connect(function()
    if getgenv().antifling then
        for _, p in pairs(plrs:GetPlayers()) do
            if p ~= lp and p.Character then
                for _, part in pairs(p.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end
    end
end)

Library.addToggle(tab6, "Anti fling", "", getgenv().antifling, function(state)
    getgenv().antifling = state
    getgenv().savedConfig.antifling = state
    getgenv().saveConfig(getgenv().savedConfig)
end)

getgenv().player = game.Players.LocalPlayer
getgenv().toggleActive = getgenv().savedConfig.autoSecondLife or false
getgenv().activated = false

local function hasKnife(player)
    local char = player.Character
    if char then
        local knife = char:FindFirstChild("Knife")
        if knife and knife:IsA("Tool") then
            return true
        end
        local backpack = player.Backpack
        if backpack then
            local knifeInBackpack = backpack:FindFirstChild("Knife")
            if knifeInBackpack and knifeInBackpack:IsA("Tool") then
                return true
            end
        end
    end
    return false
end

local function activateGodMode()
    local humanoid = player.Character:WaitForChild("Humanoid")
    humanoid.Health = humanoid.MaxHealth
    humanoid.Changed:Connect(function()
        if humanoid.Health < humanoid.MaxHealth then
            humanoid.Health = humanoid.MaxHealth
        end
    end)
end

local function notify(message)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Auto Second Life",
        Text = message,
        Duration = 5
    })
end

local function monitorKnife()
    while getgenv().toggleActive do
        local knifeDetected = false
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if hasKnife(otherPlayer) then
                if not getgenv().activated then
                    activateGodMode()
                    notify("Second Life Script activated")
                    getgenv().activated = true
                end
                knifeDetected = true
                break
            end
        end

        if not knifeDetected and getgenv().activated then
            getgenv().activated = false
        end

        wait(1)
    end
end

Library.addToggle(tab6, "Auto Second Life", "Activate second life when a Knife is detected", getgenv().toggleActive, function(state)
    getgenv().toggleActive = state
    getgenv().savedConfig.autoSecondLife = state
    getgenv().saveConfig(getgenv().savedConfig)

    if state then
        getgenv().activated = false
        coroutine.wrap(monitorKnife)()
    end
end)

Library.addButton(tab6, "second life", "Segunda vida", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() 

local function activateGodMode()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Health = humanoid.MaxHealth
    humanoid.Changed:Connect(function()
        if humanoid.Health < humanoid.MaxHealth then
            humanoid.Health = humanoid.MaxHealth
        end
    end)
end
 
activateGodMode()
    end)

getgenv().Noclip = getgenv().savedConfig.Noclip or false
local originalStates = {}

Library.addToggle(tab6, "Noclip", "", getgenv().savedConfig.Noclip or false, function(state)
    getgenv().Noclip = state
    getgenv().savedConfig.Noclip = state
    getgenv().saveConfig(getgenv().savedConfig)

    if not state then
        for part, canCollide in pairs(originalStates) do
            if part then
                part.CanCollide = canCollide
            end
        end
        originalStates = {}
    end
end)

RunService.Stepped:Connect(function()
    if not getgenv().Noclip or not player.Character then return end

    for _, part in ipairs(player.Character:GetDescendants()) do
        if part:IsA("BasePart") then
            originalStates[part] = originalStates[part] or part.CanCollide
            part.CanCollide = false
        end
    end
end)

getgenv().config = getgenv().savedConfig.config or { FOV = 80, FOVEnabled = false }

Library.addTextbox(tab6, "Adjust FOV", "", tostring(config.FOV), function(inputText)
    local value = tonumber(inputText)
    if value then
        config.FOV = value
        if config.FOVEnabled then
            workspace.CurrentCamera.FieldOfView = value
        end
        getgenv().savedConfig.config = config
        getgenv().saveConfig(getgenv().savedConfig)
    end
end)

Library.addToggle(tab6, "Activate FOV", "", config.FOVEnabled, function(state)
    config.FOVEnabled = state
    if state then
        workspace.CurrentCamera.FieldOfView = config.FOV
    else
        workspace.CurrentCamera.FieldOfView = 70
    end
    getgenv().savedConfig.config = config
    getgenv().saveConfig(getgenv().savedConfig)
end)

getgenv().P, getgenv().RS, getgenv().UIS, getgenv().p = game:GetService("Players"), game:GetService("RunService"), game:GetService("UserInputService"), game:GetService("Players").LocalPlayer

getgenv().s = getgenv().savedConfig.s or {
    s = { v = 17, l = false },
    j = { p = 50, l = false, i = false },
    c = {}
}

getgenv().u = function(prop, v)
    local h = getgenv().p.Character and getgenv().p.Character:FindFirstChildOfClass("Humanoid")
    if h then h[prop] = v end
end

getgenv().t = function(key, state, event, func)
    if getgenv().s.c[key] then
        getgenv().s.c[key]:Disconnect()
        getgenv().s.c[key] = nil
    end
    if state then
        getgenv().s.c[key] = event:Connect(func)
    end
end

getgenv().p.CharacterAdded:Connect(function()
    repeat task.wait() until getgenv().p.Character and getgenv().p.Character:FindFirstChild("Head")

    for k, c in pairs(getgenv().s.c) do 
        if c then 
            c:Disconnect() 
            getgenv().s.c[k] = nil 
        end 
    end

    local h = getgenv().p.Character:WaitForChild("Humanoid")

    if getgenv().s.s.l then 
        getgenv().u("WalkSpeed", getgenv().s.s.v) 
    end
    if getgenv().s.j.l then 
        getgenv().u("JumpPower", getgenv().s.j.p) 
    end

    if getgenv().s.j.i then
        getgenv().t("i", true, getgenv().UIS.JumpRequest, function()
            if getgenv().s.j.i then
                local h = getgenv().p.Character and getgenv().p.Character:FindFirstChildOfClass("Humanoid")
                if h then 
                    h:ChangeState("Jumping") 
                end
            end
        end)
    end
end)

Library.addSlider(tab6, "Speed", 0, 100, getgenv().s.s.v, 1, function(v)
    getgenv().s.s.v = v
    if getgenv().s.s.l then
        getgenv().u("WalkSpeed", v)
    end
    getgenv().savedConfig.s = getgenv().s
    getgenv().saveConfig(getgenv().savedConfig)
end)

Library.addToggle(tab6, "Loop speed", "bucle de velocidad", getgenv().s.s.l, function(state)
    getgenv().s.s.l = state
    getgenv().t("s", state, getgenv().RS.Heartbeat, function()
        if getgenv().s.s.l then
            getgenv().u("WalkSpeed", getgenv().s.s.v)
        end
    end)
    getgenv().savedConfig.s = getgenv().s
    getgenv().saveConfig(getgenv().savedConfig)
end)

Library.addSlider(tab6, "Power Jump", 0, 100, getgenv().s.j.p, 1, function(v)
    getgenv().s.j.p = v
    if getgenv().s.j.l then -- Solo actualiza si el toggle de loop est√° activado
        getgenv().u("JumpPower", v)
    end
    getgenv().savedConfig.s = getgenv().s
    getgenv().saveConfig(getgenv().savedConfig)
end)

Library.addToggle(tab6, "Power Jump/Loop", "bucle de poder de salto", getgenv().s.j.l, function(state)
    getgenv().s.j.l = state
    getgenv().t("j", state, getgenv().RS.Heartbeat, function()
        if getgenv().s.j.l then
            getgenv().u("JumpPower", getgenv().s.j.p)
        end
    end)
    getgenv().savedConfig.s = getgenv().s
    getgenv().saveConfig(getgenv().savedConfig)
end)

Library.addToggle(tab6, "Infinite Jump", "salto infinito", getgenv().s.j.i, function(state)
    getgenv().s.j.i = state
    getgenv().t("i", state, getgenv().UIS.JumpRequest, function()
        if getgenv().s.j.i then
            local h = getgenv().p.Character and getgenv().p.Character:FindFirstChildOfClass("Humanoid")
            if h then 
                h:ChangeState("Jumping") 
            end
        end
    end)
    getgenv().savedConfig.s = getgenv().s
    getgenv().saveConfig(getgenv().savedConfig)
end)

local plr, rs = game.Players.LocalPlayer, game:GetService("RunService")
local spd, maxSpd, acc, dec, landDec, landSpd, landDur = 3, 15, 0.2, 0.1, 0.05, 2, 0.3
local active, conn = false
maxSpd = savedConfig.maxSpd or maxSpd

local function setup(chr)
    local hum = chr:WaitForChild("Humanoid")
    local slide, time = false, 0
    if conn then conn:Disconnect() end
    conn = rs.Heartbeat:Connect(function(dt)
        local state, dir = hum:GetState(), hum.MoveDirection
        if state == Enum.HumanoidStateType.Freefall and active then
            spd = dir.Magnitude > 0 and math.min(spd + acc, maxSpd) or math.max(spd - dec, 0)
            chr:TranslateBy(dir * spd * dt)
        elseif state == Enum.HumanoidStateType.Landed then
            if not slide then spd, time, slide = landSpd, 0, true end
        elseif slide then
            if time < landDur then
                chr:TranslateBy(dir * spd * dt)
                spd, time = math.max(spd - landDec, 0), time + dt
            else slide = false end
        else spd = math.max(spd - dec, 0) end
    end)
end

plr.CharacterAdded:Connect(setup)
if plr.Character then setup(plr.Character) end

Library.addToggle(tab6, "Fake speed glitch", "", savedConfig.fakeSpeedGlitch or false, function(state)
    active = state
    savedConfig.fakeSpeedGlitch = state
    getgenv().saveConfig(savedConfig)
end)

Library.addTextbox(tab6, "Speed glitch adjust", "", tostring(maxSpd), function(inputText)
    local num = tonumber(inputText)
    if num and num > 0 then
        maxSpd = num
        savedConfig.maxSpd = maxSpd
        getgenv().saveConfig(savedConfig)
    end
end)

Library.addButton(tab7, "Get all the emotes", "obtener todos los emotes", function()
    local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local Emotes = PlayerGui:WaitForChild("MainGUI"):WaitForChild("Game"):FindFirstChild("Emotes")

    if Emotes then
        local success = pcall(function()
            require(game:GetService("ReplicatedStorage").Modules.EmoteModule).GeneratePage(
                {"headless", "zombie", "zen", "ninja", "floss", "dab", "sit"},
                Emotes,
                "Free Emotes"
            )
        end)

        if success then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Success",
                Text = "Emotes obtained",
                Duration = 3
            })
        end
    end
end)

Library.addButton(tab7, "Ninja", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2431864798"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Dab", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2445521505"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Floss", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2452938820"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Headless", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2513694073"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Zen", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2431812646"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Zombie", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2513692312"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab7, "Sit", "", function()
    local anim = Instance.new('Animation')
    anim.AnimationId = "rbxassetid://2431845940"
    local track = game.Players.LocalPlayer.Character.Humanoid.Animator:LoadAnimation(anim)
    track:Play()
    game.Players.LocalPlayer.Character.Humanoid.Changed:Once(function()
        track:Stop()
    end)
end)

Library.addButton(tab8, "Save Config", "Guardar la configuraci√≥n actual", function()
    saveConfig(savedConfig)
end)

Library.addButton(tab8, "Delete Config", "Eliminar la configuraci√≥n actual", function()
    if isfile(configFileName) then
        delfile(configFileName)
    end
end)

getgenv().running = false
getgenv().fps = getgenv().savedConfig.fps or 120

Library.addToggle(tab8, "Activate loop fps", "Activar loop fps", getgenv().savedConfig.running or false, function(state)
    getgenv().running = state
    getgenv().savedConfig.running = state
    getgenv().saveConfig(getgenv().savedConfig)

    if state then
        task.spawn(function()
            while getgenv().running do
                task.wait(1 / getgenv().fps)
            end
        end)
    end
end)

Library.addTextbox(tab8, "FPS Limit", "Ajusta los FPS", tostring(getgenv().fps), function(inputText)
    local numValue = tonumber(inputText)
    if numValue then
        getgenv().fps = numValue
        setfpscap(getgenv().fps)
        getgenv().savedConfig.fps = getgenv().fps
        getgenv().saveConfig(getgenv().savedConfig)
    end
end)

getgenv().antiAfkEnabled = false
local idledConnection

Library.addToggle(tab8, "Anti afk", "", getgenv().antiAfkEnabled, function(state)
    getgenv().antiAfkEnabled = state
    local C = game:GetService("VirtualUser")

    if getgenv().antiAfkEnabled then
        idledConnection = game:GetService("Players").LocalPlayer.Idled:connect(function()
            C:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            task.wait(1)
            C:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end)
    else
        if idledConnection then
            idledConnection:Disconnect()
        end
    end
end)

local RunService = game:GetService("RunService")
getgenv().antisteal = true
local heartbeatConnection

local function startAntisteal()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineTrade"):FireServer()
        game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineRequest"):FireServer()
    end)
end

local function stopAntisteal()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end
end

Library.addToggle(tab8, "anti-steal (beta)", "", true, function(state)
    getgenv().antisteal = state
    if state then
        startAntisteal()
    else
        stopAntisteal()
    end
end)

getgenv().MuteRadiosEnabled = getgenv().savedConfig.MuteRadiosEnabled or false

Library.addToggle(tab8, "Mute Radios", "", getgenv().MuteRadiosEnabled, function(state)
    getgenv().MuteRadiosEnabled = state
    getgenv().savedConfig.MuteRadiosEnabled = state
    getgenv().saveConfig(getgenv().savedConfig)
end)

RunService.Heartbeat:Connect(function()
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            local Sound = Player.Character
                and Player.Character:FindFirstChild("Radio")
                and Player.Character.Radio:FindFirstChildOfClass("Sound")
            if Sound then
                Sound.Volume = getgenv().MuteRadiosEnabled and 0 or 0.5
            end
        end
    end
end)

Library.addButton(tab8, "ReJoin", "Re unirse", function()
    game:GetService('TeleportService'):Teleport(game.PlaceId, Plr)
end)

Library.addButton(tab8, "Server hop", "", function() 
local teleportService = game:GetService("TeleportService")
teleportService:Teleport(game.PlaceId)
end)

local g = getgenv()
g.GuiService = game:GetService("GuiService")
g.Players = game:GetService("Players")
g.TeleportService = game:GetService("TeleportService")
g.player = g.Players.LocalPlayer
g.autoRejoin = false
g.teleportQueued = false
g.executedOnce = false  -- Bandera para controlar la ejecuci√≥n

local function onErrorMessageChanged(errorMessage)
    if g.autoRejoin and errorMessage and errorMessage ~= "" and not g.executedOnce then
        print("Error detected: " .. errorMessage)
        if g.player and not g.teleportQueued then
            g.teleportQueued = true
            local scriptContent = [[
                local scriptToExecute = loadstring(game:HttpGet("https://raw.githubusercontent.com/bot1200/M/refs/heads/main/M"))
                if scriptToExecute then
                    scriptToExecute()
                end
            ]]
            local QueueTeleport = queue_on_teleport or (syn and syn.queue_on_teleport)
            if QueueTeleport then 
                QueueTeleport(scriptContent) 
            end
            g.TeleportService:Teleport(game.PlaceId, g.player)
            g.executedOnce = true  -- Evita que se ejecute m√°s de una vez
        end
    end
end

g.GuiService.ErrorMessageChanged:Connect(onErrorMessageChanged)

setfpscap(math.huge)
print("Fps unblock √ó2")
